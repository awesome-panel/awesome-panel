[
  {
    "objectID": "resources/stumpy/index.html",
    "href": "resources/stumpy/index.html",
    "title": "Stumpy",
    "section": "",
    "text": "STUMPY is a powerful and scalable Python library identifies repeating patterns in your timeseries. It does this by efficiently computing something called a matrix profile."
  },
  {
    "objectID": "resources/stumpy/index.html#introduction",
    "href": "resources/stumpy/index.html#introduction",
    "title": "Stumpy",
    "section": "",
    "text": "STUMPY is a powerful and scalable Python library identifies repeating patterns in your timeseries. It does this by efficiently computing something called a matrix profile."
  },
  {
    "objectID": "resources/stumpy/index.html#app",
    "href": "resources/stumpy/index.html#app",
    "title": "Stumpy",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window"
  },
  {
    "objectID": "resources/stumpy/index.html#code",
    "href": "resources/stumpy/index.html#code",
    "title": "Stumpy",
    "section": "Code",
    "text": "Code\n\n\nShow"
  },
  {
    "objectID": "resources/stumpy/index.html#gif",
    "href": "resources/stumpy/index.html#gif",
    "title": "Stumpy",
    "section": "Gif",
    "text": "Gif\nI think the app looks amazing. Its really performant too."
  },
  {
    "objectID": "resources/stumpy/index.html#png",
    "href": "resources/stumpy/index.html#png",
    "title": "Stumpy",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/async_tasks/index.html",
    "href": "resources/async_tasks/index.html",
    "title": "Async Tasks",
    "section": "",
    "text": "When creating awesome analytics apps you sometimes want to run blocking tasks asynchronously in a background thread. Panel supports this as its running on top of the asynchronous web server Tornado.\nThe app below shows how to start a background thread that updates a progressbar while the rest of the application remains responsive. We utilize a ThreadPoolExecutor and async to achieve this."
  },
  {
    "objectID": "resources/async_tasks/index.html#introduction",
    "href": "resources/async_tasks/index.html#introduction",
    "title": "Async Tasks",
    "section": "",
    "text": "When creating awesome analytics apps you sometimes want to run blocking tasks asynchronously in a background thread. Panel supports this as its running on top of the asynchronous web server Tornado.\nThe app below shows how to start a background thread that updates a progressbar while the rest of the application remains responsive. We utilize a ThreadPoolExecutor and async to achieve this."
  },
  {
    "objectID": "resources/async_tasks/index.html#app",
    "href": "resources/async_tasks/index.html#app",
    "title": "Async Tasks",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/async_tasks/index.html#code",
    "href": "resources/async_tasks/index.html#code",
    "title": "Async Tasks",
    "section": "Code",
    "text": "Code\n\n\nShow\n\nimport time\nfrom concurrent.futures import ThreadPoolExecutor\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport panel as pn\nimport param\nfrom asyncio import wrap_future\n\nclass ProgressExtMod(pn.viewable.Viewer):\n    \"\"\"A custom component for easy progress reporting\"\"\"\n\n    completed = param.Integer(default=0)\n    bar_color = param.String(default=\"info\")\n    num_tasks = param.Integer(default=100, bounds=(1, None))\n\n    # @param.depends('completed', 'num_tasks')\n    @property\n    def value(self) -&gt; int:\n        \"\"\"Returns the progress value\n\n        Returns:\n            int: The progress value\n        \"\"\"\n        return int(100 * (self.completed / self.num_tasks))\n\n    def reset(self):\n        \"\"\"Resets the value and message\"\"\"\n        # Please note the order matters as the Widgets updates two times. One for each change\n        self.completed = 0\n\n    def __panel__(self):\n        return self.view\n\n    @param.depends(\"completed\", \"bar_color\")\n    def view(self):\n        \"\"\"View the widget\n        Returns:\n            pn.viewable.Viewable: Add this to your app to see the progress reported\n        \"\"\"\n        if self.value:\n            return pn.widgets.Progress(\n                active=True, value=self.value, align=\"center\", sizing_mode=\"stretch_width\"\n            )\n        return None\n\n    @contextmanager\n    def increment(self):\n        \"\"\"Increments the value\n        \n        Can be used as context manager or decorator\n        \n        Yields:\n            None: Nothing is yielded\n        \"\"\"\n        self.completed += 1\n        yield\n        if self.completed == self.num_tasks:\n            self.reset()\n\nexecutor = ThreadPoolExecutor(max_workers=2)  # pylint: disable=consider-using-with\nprogress = ProgressExtMod()\n\n\nclass AsyncComponent(pn.viewable.Viewer):\n    \"\"\"A component that demonstrates how to run a Blocking Background task asynchronously\n    in Panel\"\"\"\n\n    select = param.Selector(objects=range(10))\n    slider = param.Number(2, bounds=(0, 10))\n    \n    run_blocking_task = param.Event(label=\"RUN\")\n    result = param.Number(0)\n    view = param.Parameter()\n\n    def __init__(self, **params):\n        super().__init__(**params)\n\n        self._layout = pn.Column(\n            pn.pane.Markdown(\"## Blocking Task Running in Background\"),\n            pn.Param(\n                self,\n                parameters=[\"run_blocking_task\", \"result\"],\n                widgets={\"result\": {\"disabled\": True}, \"run_blocking_task\": {\"button_type\": \"primary\"}},\n                show_name=False,\n            ),\n            progress,\n            pn.pane.Markdown(\"## Other, Non-Blocked Tasks\"),\n            pn.Param(\n                self,\n                parameters=[\"select\", \"slider\"],\n                widgets={\"text\": {\"disabled\": True}},\n                show_name=False,\n            ),\n            self.text\n        )\n\n    def __panel__(self):\n        return self._layout\n\n    @param.depends(\"slider\", \"select\")\n    def text(self):\n        if self.select:\n            select = self.select\n        else:\n            select = 0\n        return f\"{select} + {self.slider} = {select + self.slider}\"\n\n    @pn.depends(\"run_blocking_task\", watch=True)\n    async def _run_blocking_tasks(self, num_tasks=10):\n        \"\"\"Runs background tasks num_tasks times\"\"\"\n        num_tasks = 20\n        progress.num_tasks = num_tasks\n        for _ in range(num_tasks):\n            future = executor.submit(self._run_blocking_task)\n            result = await wrap_future(future)\n            self._update(result)\n\n    @progress.increment()\n    def _update(self, number):\n        self.result += number\n\n    @staticmethod\n    def _run_blocking_task():\n        time.sleep(np.random.randint(1, 2))\n        return 5\n\nif pn.state.served:\n    pn.extension()\n    \n    component = AsyncComponent()\n    pn.template.FastListTemplate(\n        site=\"Awesome Panel\", site_url=\"https://awesome-panel.org\", title=\"Async Tasks\", main=[component], main_layout=None, main_max_width=\"400px\"\n    ).servable()"
  },
  {
    "objectID": "resources/async_tasks/index.html#gif",
    "href": "resources/async_tasks/index.html#gif",
    "title": "Async Tasks",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/async_tasks/index.html#png",
    "href": "resources/async_tasks/index.html#png",
    "title": "Async Tasks",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/async_tasks/index.html#mp4",
    "href": "resources/async_tasks/index.html#mp4",
    "title": "Async Tasks",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About\nWe want to show how awesome Panel by HoloViz is and push the framework forward.\n\n\n\nAwesome Panel Intro\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Awesome Panel",
    "section": "",
    "text": "Panel by HoloViz is the powerful data exploration & web app framework for Python.\nCheck out the awesome community resources below.\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nAsync Tasks\n\n\n\n\n\n\n\nasync\n\n\nthreads\n\n\n\n\nRun blocking tasks in the background using a ThreadPoolExecutor and Async\n\n\n\n\n\n\nDec 22, 2023\n\n\nJochem Smit, Marc Skov Madsen\n\n\n\n\n\n\n  \n\n\n\n\nBootstrap Dashboard\n\n\n\n\n\n\n\ndashboard\n\n\nhvplot\n\n\n\n\nA Bootstrap like dashboard\n\n\n\n\n\n\nDec 22, 2023\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n  \n\n\n\n\nStumpy\n\n\n\n\n\n\n\npyodide\n\n\ntimeseries\n\n\nwasm\n\n\n\n\nUse the Stumpy library to identify patterns in timeseries\n\n\n\n\n\n\nDec 22, 2023\n\n\nMarc Skov Madsen, Sean Law\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html",
    "href": "resources/bootstrap_dashboard/index.html",
    "title": "Bootstrap Dashboard",
    "section": "",
    "text": "This dashboard demonstrates that a dashboard layout similar to the Bootstrap dashboard template can be implemented in Panel."
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#introduction",
    "href": "resources/bootstrap_dashboard/index.html#introduction",
    "title": "Bootstrap Dashboard",
    "section": "",
    "text": "This dashboard demonstrates that a dashboard layout similar to the Bootstrap dashboard template can be implemented in Panel."
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#app",
    "href": "resources/bootstrap_dashboard/index.html#app",
    "title": "Bootstrap Dashboard",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#code",
    "href": "resources/bootstrap_dashboard/index.html#code",
    "title": "Bootstrap Dashboard",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"The purpose of this app is to test that a **multi-page Dashboard Layout** similar to the\n[bootstrap dashboard template](https://getbootstrap.com/docs/4.3/examples/dashboard/)\nfrom [getboostrap.com](https://getbootstrap.com/) can be implemented in\n[Panel](https://panel.pyviz.org/).\n\"\"\"\nimport hvplot.pandas  # pylint: disable=unused-import\nimport pandas as pd\nimport panel as pn\n\nBOOTSTRAP_DASHBOARD_CHART_URL=\"https://awesomepanel.blob.core.windows.net/resources/bootstrap_dashboard/bootstrap_dashboard_chart.csv\"\nBOOTSTRAP_DASHBOARD_TABLE_URL=\"https://awesomepanel.blob.core.windows.net/resources/bootstrap_dashboard/bootstrap_dashboard_table.csv\"\n\nCOLOR=\"#0072B5\"\n\n@pn.cache\ndef _get_chart_data():\n    return pd.read_csv(BOOTSTRAP_DASHBOARD_CHART_URL)\n\n@pn.cache\ndef _get_table_data():\n    return pd.read_csv(BOOTSTRAP_DASHBOARD_TABLE_URL)\n\ndef _holoviews_chart():\n    \"\"\"## Dashboard Orders Chart generated by HoloViews\"\"\"\n    data = _get_chart_data()\n    line_plot = data.hvplot.line(\n        x=\"Day\",\n        y=\"Orders\",\n        height=500,\n        line_color=COLOR,\n        line_width=6,\n    )\n    scatter_plot = data.hvplot.scatter(x=\"Day\", y=\"Orders\", height=300,).opts(\n        marker=\"o\",\n        size=10,\n        color=COLOR,\n    )\n    fig = line_plot * scatter_plot\n    gridstyle = {\n        \"grid_line_color\": \"black\",\n        \"grid_line_width\": 0.1,\n    }\n    fig = fig.opts(\n        responsive=True,\n        toolbar=None,\n        yticks=list(\n            range(\n                12000,\n                26000,\n                2000,\n            )\n        ),\n        ylim=(\n            12000,\n            26000,\n        ),\n        gridstyle=gridstyle,\n        show_grid=True,\n    )\n    return fig\n\napp = pn.extension(\"tabulator\", sizing_mode=\"stretch_width\")\n\npn.template.FastListTemplate(\n    site=\"Awesome Panel\", site_url=\"https://awesome-panel.org\", title=\"Bootstrap Dashboard\",\n    main=[\n        pn.Column(\n            pn.pane.Markdown(\"## Dashboard\"),\n            _holoviews_chart()),\n            pn.Column(pn.pane.Markdown(\"## Section Title\"),\n            pn.widgets.Tabulator(_get_table_data(), layout='fit_data_stretch')),\n    ], main_max_width=\"800px\", main_layout=None,\n).servable()"
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#gif",
    "href": "resources/bootstrap_dashboard/index.html#gif",
    "title": "Bootstrap Dashboard",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#png",
    "href": "resources/bootstrap_dashboard/index.html#png",
    "title": "Bootstrap Dashboard",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#mp4",
    "href": "resources/bootstrap_dashboard/index.html#mp4",
    "title": "Bootstrap Dashboard",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  }
]