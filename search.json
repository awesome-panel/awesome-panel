[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Awesome Panel",
    "section": "",
    "text": "Panel by HoloViz is the powerful data exploration & web app framework for Python.\nPlease give Panel a ⭐ on Github. Thanks.\n\nStar\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nWeather Station Viewer\n\n\n\n\n\n\nclimate\n\n\nhvplot\n\n\nhugging face\n\n\n\nThis app allows you to compare a single year of data from a weather station to the average of a range of years.\n\n\n\n\n\nJan 28, 2024\n\n\nAndrew Huang\n\n\n\n\n\n\n\n\n\n\n\n\nLonboard Dashboard\n\n\n\n\n\n\nanywidget\n\n\ndashboard\n\n\nhugging face\n\n\nipywidgets\n\n\n\nA Dashboard using Lonboard to fast, interactive geospatial vector data visualization.\n\n\n\n\n\nJan 27, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nMapWidget Cesium\n\n\n\n\n\n\nanywidget\n\n\ndashboard\n\n\nhugging face\n\n\nipywidgets\n\n\n\nA dashboard showcasing mapwidget.cesium by Qiusheng Wu\n\n\n\n\n\nJan 27, 2024\n\n\nQiusheng Wu\n\n\n\n\n\n\n\n\n\n\n\n\nHurdat Tracks Viewer\n\n\n\n\n\n\ngeo\n\n\nhugging face\n\n\nmatplotlib\n\n\n\nAn interactive web app for analysing hurricane tracks using Tropycal and Panel\n\n\n\n\n\nJan 25, 2024\n\n\nAndrew Huang\n\n\n\n\n\n\n\n\n\n\n\n\nStanda - Stock Analysis Dashboard\n\n\n\n\n\n\nfinance\n\n\nhugging face\n\n\nplotly\n\n\ntabulator\n\n\ntrading\n\n\n\nA large, nicely polished Stock Analysis Dashboard\n\n\n\n\n\nJan 25, 2024\n\n\nFayssal El Mofatiche\n\n\n\n\n\n\n\n\n\n\n\n\nTable of elements with Wikipedia row content\n\n\n\n\n\n\nchemistry\n\n\nhugging face\n\n\npyodide\n\n\ntabulator\n\n\n\nTable of elements. When you click a row it expands and shows the Wikipedia article. Powered by Tabulator.\n\n\n\n\n\nJan 14, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nCommuting Flows Italy\n\n\n\n\n\n\ngeo\n\n\nhugging face\n\n\npyodide\n\n\n\nA dashboard showing commuting flows between Italian regions\n\n\n\n\n\nJan 13, 2024\n\n\nIvan D’Ortenzio\n\n\n\n\n\n\n\n\n\n\n\n\nStreaming Number Indicators\n\n\n\n\n\n\nhugging face\n\n\npyodide\n\n\npyscript\n\n\nstreaming\n\n\n\nDashboard with streaming Number Indicators\n\n\n\n\n\nJan 13, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nCrossfiltering with HoloViews\n\n\n\n\n\n\nbokeh\n\n\nhugging face\n\n\npyodide\n\n\ntimeseries\n\n\n\nApply a selection in one plot as a filter in other plots\n\n\n\n\n\nJan 8, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nPanel ChatBot Pack\n\n\n\n\n\n\nartificial intelligence\n\n\nllm\n\n\n\nBuild a chatbot with LlamaIndex to talk to your Github repository\n\n\n\n\n\nJan 8, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nThe Easiest Way to Create an Interactive Dashboard in Python\n\n\n\n\n\n\ndashboard\n\n\nhvplot\n\n\nrx\n\n\n\nThe Easiest Way to Create an Interactive Dashboard in Python with param.rx and Panel\n\n\n\n\n\nJan 8, 2024\n\n\nMarc Skov Madsen, Sophia Yang\n\n\n\n\n\n\n\n\n\n\n\n\nCaching Example\n\n\n\n\n\n\nhugging face\n\n\nperformance\n\n\npyodide\n\n\n\nLearn how caching can speed up your app\n\n\n\n\n\nJan 7, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nClassic Dashboard\n\n\n\n\n\n\ndashboard\n\n\nhvplot\n\n\n\nLearn how to create a classic dashboard\n\n\n\n\n\nJan 7, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nVideo Stream\n\n\n\n\n\n\nhugging face\n\n\npyodide\n\n\nvideo\n\n\n\nImage processing with Pillow and Scikit Image\n\n\n\n\n\nJan 7, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nAsync Tasks\n\n\n\n\n\n\nasync\n\n\nperformance\n\n\nthreads\n\n\n\nRun blocking tasks in the background using a ThreadPoolExecutor and Async\n\n\n\n\n\nJan 6, 2024\n\n\nJochem Smit, Marc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nBootstrap Dashboard\n\n\n\n\n\n\ndashboard\n\n\nhugging face\n\n\nhvplot\n\n\npyodide\n\n\n\nA Bootstrap like dashboard\n\n\n\n\n\nJan 6, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nPanel Chat Examples\n\n\n\n\n\n\nartificial intelligence\n\n\nllm\n\n\n\nA resource of Panel Chat Apps using Mistral, LangChain, LlamaIndex, OpenAI etc.\n\n\n\n\n\nJan 6, 2024\n\n\nAndrew Huang, Marc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nStumpy\n\n\n\n\n\n\nbokeh\n\n\nhugging face\n\n\npyodide\n\n\ntimeseries\n\n\n\nUse the Stumpy library to identify patterns in timeseries\n\n\n\n\n\nJan 6, 2024\n\n\nMarc Skov Madsen, Sean Law\n\n\n\n\n\n\n\n\n\n\n\n\nTasty Map\n\n\n\n\n\n\ncolor\n\n\nhugging face\n\n\n\nGenerate custom color palettes easily using the TastyMap Panel app\n\n\n\n\n\nJan 6, 2024\n\n\nAndrew Huang\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "resources/video_stream/index.html",
    "href": "resources/video_stream/index.html",
    "title": "Video Stream",
    "section": "",
    "text": "This app takes a videostream from your web cam and applies different filters supplied by Pillow and Scikit Image.\nYou can change the model in the sidebar. The left plot shows how much time it takes to run the model on the image. The right plot shows the time since the last image was processed.\nThis app is heavily inspired by a similar realtime image processing app by Whitphx.\n\nStar"
  },
  {
    "objectID": "resources/video_stream/index.html#introduction",
    "href": "resources/video_stream/index.html#introduction",
    "title": "Video Stream",
    "section": "",
    "text": "This app takes a videostream from your web cam and applies different filters supplied by Pillow and Scikit Image.\nYou can change the model in the sidebar. The left plot shows how much time it takes to run the model on the image. The right plot shows the time since the last image was processed.\nThis app is heavily inspired by a similar realtime image processing app by Whitphx.\n\nStar"
  },
  {
    "objectID": "resources/video_stream/index.html#app",
    "href": "resources/video_stream/index.html#app",
    "title": "Video Stream",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/video_stream/index.html#code",
    "href": "resources/video_stream/index.html#code",
    "title": "Video Stream",
    "section": "Code",
    "text": "Code\n\n\nShow\n\nimport base64\nimport io\nimport time\n\nimport numpy as np\nimport param\nimport PIL\nimport skimage\n\nfrom PIL import Image, ImageFilter\nfrom skimage import data, filters\nfrom skimage.color.adapt_rgb import adapt_rgb, each_channel\nfrom skimage.draw import rectangle\nfrom skimage.exposure import rescale_intensity\nfrom skimage.feature import Cascade\n\nimport panel as pn\nimport sys\n\n\n\nHEIGHT = 600 # pixels\nWIDTH = 600 # pixels\nTIMEOUT = 500 # milliseconds\n\nif sys.platform == 'emscripten':\n    TIMEOUT=100\n\nCSS=\"\"\"\n.mdc-drawer {background: var(--light-bg-color) !important;}\"\"\"\n\npn.extension(raw_css=[CSS], sizing_mode=\"stretch_width\")\n\n\nclass ImageModel(pn.viewable.Viewer):\n    \"\"\"Base class for image models.\"\"\"\n\n    def __init__(self, **params):\n        super().__init__(**params)\n\n        with param.edit_constant(self):\n            self.name = self.__class__.name.replace(\"Model\", \"\")\n        self.view = self.create_view()\n\n    def __panel__(self):\n        return self.view\n\n    def apply(self, image: str, height: int = HEIGHT, width: int = WIDTH) -&gt; str:\n        \"\"\"Transforms a base64 encoded jpg image to a base64 encoded jpg BytesIO object\"\"\"\n        raise NotImplementedError()\n\n    def create_view(self):\n        \"\"\"Creates a view of the parameters of the transform to enable the user to configure them\"\"\"\n        return pn.Param(self, name=self.name)\n\n    def transform(self, image):\n        \"\"\"Transforms the image\"\"\"\n        raise NotImplementedError()\n\n\nclass PILImageModel(ImageModel):\n    \"\"\"Base class for PIL image models\"\"\"\n\n    @staticmethod\n    def to_pil_img(value: str, height=HEIGHT, width=WIDTH):\n        \"\"\"Converts a base64 jpeg image string to a PIL.Image\"\"\"\n        encoded_data = value.split(\",\")[1]\n        base64_decoded = base64.b64decode(encoded_data)\n        image = Image.open(io.BytesIO(base64_decoded))\n        image.draft(\"RGB\", (height, width))\n        return image\n\n    @staticmethod\n    def from_pil_img(image: Image):\n        \"\"\"Converts a PIL.Image to a base64 encoded JPG BytesIO object\"\"\"\n        buff = io.BytesIO()\n        image.save(buff, format=\"JPEG\")\n        return buff\n\n    def apply(self, image: str, height: int = HEIGHT, width: int = WIDTH) -&gt; io.BytesIO:\n        pil_img = self.to_pil_img(image, height=height, width=width)\n\n        transformed_image = self.transform(pil_img)\n\n        return self.from_pil_img(transformed_image)\n\n    def transform(self, image: PIL.Image) -&gt; PIL.Image:\n        \"\"\"Transforms the PIL.Image image\"\"\"\n        raise NotImplementedError()\n\n\nclass NumpyImageModel(ImageModel):\n    \"\"\"Base class for np.ndarray image models\"\"\"\n\n    @staticmethod\n    def to_np_ndarray(image: str, height=HEIGHT, width=WIDTH) -&gt; np.ndarray:\n        \"\"\"Converts a base64 encoded jpeg string to a np.ndarray\"\"\"\n        pil_img = PILImageModel.to_pil_img(image, height=height, width=width)\n        return np.array(pil_img)\n\n    @staticmethod\n    def from_np_ndarray(image: np.ndarray) -&gt; io.BytesIO:\n        \"\"\"Converts np.ndarray jpeg image to a jpeg BytesIO instance\"\"\"\n        if image.dtype == np.dtype(\"float64\"):\n            image = (image * 255).astype(np.uint8)\n        pil_img = PIL.Image.fromarray(image)\n        return PILImageModel.from_pil_img(pil_img)\n\n    def apply(self, image: str, height: int = HEIGHT, width: int = WIDTH) -&gt; io.BytesIO:\n        np_array = self.to_np_ndarray(image, height=height, width=width)\n\n        transformed_image = self.transform(np_array)\n\n        return self.from_np_ndarray(transformed_image)\n\n    def transform(self, image: np.ndarray) -&gt; np.ndarray:\n        \"\"\"Transforms the np.array image\"\"\"\n        raise NotImplementedError()\n\n\nclass Timer(pn.viewable.Viewer):\n    \"\"\"Helper Component used to show duration trends\"\"\"\n\n    _trends = param.Dict()\n\n    def __init__(self, **params):\n        super().__init__()\n\n        self.last_updates = {}\n        self._trends = {}\n\n        self._layout = pn.Row(**params)\n\n    def time_it(self, name, func, *args, **kwargs):\n        \"\"\"Measures the duration of the execution of the func function and reports it under the\n        name specified\"\"\"\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        duration = round(end - start, 2)\n        self._report(name=name, duration=duration)\n        return result\n\n    def inc_it(self, name):\n        \"\"\"Measures the duration since the last time inc_it was called and reports it under the\n        specified name\"\"\"\n        start = self.last_updates.get(name, time.time())\n        end = time.time()\n        duration = round(end - start, 2)\n        self._report(name=name, duration=duration)\n        self.last_updates[name] = end\n\n    def _report(self, name, duration):\n        if not name in self._trends:\n            self._trends[name] = pn.indicators.Trend(\n                name=name,\n                data={\"x\": [1], \"y\": [duration]},\n                height=100,\n                width=150,\n                sizing_mode=\"fixed\",\n            )\n            self.param.trigger(\"_trends\")\n        else:\n            trend = self._trends[name]\n            next_x = max(trend.data[\"x\"]) + 1\n            trend.stream({\"x\": [next_x], \"y\": [duration]}, rollover=10)\n\n    @param.depends(\"_trends\")\n    def _panel(self):\n        self._layout[:] = list(self._trends.values())\n        return self._layout\n\n    def __panel__(self):\n        return pn.panel(self._panel)\n\n\ndef to_instance(value, **params):\n    \"\"\"Converts the value to an instance\n\n    Args:\n        value: A param.Parameterized class or instance\n\n    Returns:\n        An instance of the param.Parameterized class\n    \"\"\"\n    if isinstance(value, param.Parameterized):\n        value.param.update(**params)\n        return value\n    return value(**params)\n\n\nclass VideoStreamInterface(pn.viewable.Viewer):\n    \"\"\"An easy to use interface for a VideoStream and a set of transforms\"\"\"\n\n    video_stream = param.ClassSelector(\n        class_=pn.widgets.VideoStream, constant=True, doc=\"The source VideoStream\", allow_refs=False,\n    )\n\n    height = param.Integer(\n        default=HEIGHT,\n        bounds=(10, 2000),\n        step=10,\n        doc=\"\"\"The height of the image converted and shown\"\"\",\n    )\n    width = param.Integer(\n        default=WIDTH,\n        bounds=(10, 2000),\n        step=10,\n        doc=\"\"\"The width of the image converted and shown\"\"\",\n    )\n\n    model = param.Selector(doc=\"The currently selected model\")\n\n    def __init__(\n        self,\n        models,\n        timeout=TIMEOUT,\n        paused=False,\n        **params,\n    ):\n        super().__init__(\n            video_stream=pn.widgets.VideoStream(\n                name=\"Video Stream\",\n                timeout=timeout,\n                paused=paused,\n                height=0,\n                width=0,\n                visible=False,\n                format=\"jpeg\",\n            ),\n            **params,\n        )\n        self.image = pn.pane.JPG(\n            height=self.height, width=self.width, sizing_mode=\"fixed\"\n        )\n        self._updating = False\n        models = [to_instance(model) for model in models]\n        self.param.model.objects = models\n        self.model = models[0]\n        self.timer = Timer(sizing_mode=\"stretch_width\")\n        self.settings = self._create_settings()\n        self._panel = self._create_panel()\n\n    def _create_settings(self):\n        return pn.Column(\n            pn.Param(\n                self.video_stream,\n                parameters=[\"timeout\", \"paused\"],\n                widgets={\n                    \"timeout\": {\n                        \"widget_type\": pn.widgets.IntSlider,\n                        \"start\": 10,\n                        \"end\": 2000,\n                        \"step\": 10,\n                    }\n                },\n            ),\n            self.timer,\n            pn.Param(self, parameters=[\"height\", \"width\"], name=\"Image\"),\n            pn.Param(\n                self,\n                parameters=[\"model\"],\n                expand_button=False,\n                expand=False,\n                widgets={\n                    \"model\": {\n                        \"widget_type\": pn.widgets.RadioButtonGroup,\n                        \"orientation\": \"vertical\",\n                        \"button_type\": \"primary\",\n                        \"button_style\": \"outline\"\n                    }\n                },\n                name=\"Model\",\n            ),\n            self._get_transform,\n        )\n\n    def _create_panel(self):\n        return pn.Row(\n            self.video_stream,\n            pn.layout.HSpacer(),\n            self.image,\n            pn.layout.HSpacer(),\n            sizing_mode=\"stretch_width\",\n            align=\"center\",\n        )\n\n    @param.depends(\"height\", \"width\", watch=True)\n    def _update_height_width(self):\n        self.image.height = self.height\n        self.image.width = self.width\n\n    @param.depends(\"model\")\n    def _get_transform(self):\n        # Hack: returning self.transform stops working after browsing the transforms for a while\n        return self.model.view\n\n    def __panel__(self):\n        return self._panel\n\n    @param.depends(\"video_stream.value\", watch=True)\n    def _handle_stream(self):\n        if self._updating:\n            return\n\n        self._updating = True\n        if self.model and self.video_stream.value:\n            value = self.video_stream.value\n            try:\n                image = self.timer.time_it(\n                    name=\"Model\",\n                    func=self.model.apply,\n                    image=value,\n                    height=self.height,\n                    width=self.width,\n                )\n                self.image.object = image\n            except PIL.UnidentifiedImageError:\n                print(\"unidentified image\")\n\n            self.timer.inc_it(\"Last Update\")\n        self._updating = False\n\n\nclass GaussianBlurModel(PILImageModel):\n    \"\"\"Gaussian Blur Model\n\n    https://pillow.readthedocs.io/en/stable/reference/ImageFilter.html#PIL.ImageFilter.GaussianBlur\n    \"\"\"\n\n    radius = param.Integer(default=0, bounds=(0, 10))\n\n    def transform(self, image: Image):\n        return image.filter(ImageFilter.GaussianBlur(radius=self.radius))\n\n\nclass GrayscaleModel(NumpyImageModel):\n    \"\"\"GrayScale Model\n\n    https://scikit-image.org/docs/0.15.x/auto_examples/color_exposure/plot_rgb_to_gray.html\n    \"\"\"\n\n    def transform(self, image: np.ndarray):\n        grayscale = skimage.color.rgb2gray(image[:, :, :3])\n        return skimage.color.gray2rgb(grayscale)\n\n\nclass SobelModel(NumpyImageModel):\n    \"\"\"Sobel Model\n\n    https://scikit-image.org/docs/0.15.x/auto_examples/color_exposure/plot_adapt_rgb.html\n    \"\"\"\n    def transform(self, image):\n\n\n        @adapt_rgb(each_channel)\n        def sobel_each(image):\n            return filters.sobel(image)\n\n        return rescale_intensity(1 - sobel_each(image))\n\n\n@pn.cache()\ndef get_detector():\n    \"\"\"Returns the Cascade detector\"\"\"\n    trained_file = data.lbp_frontal_face_cascade_filename()\n    return Cascade(trained_file)\n\n\nclass FaceDetectionModel(NumpyImageModel):\n    \"\"\"Face detection using a cascade classifier.\n\n    https://scikit-image.org/docs/0.15.x/auto_examples/applications/plot_face_detection.html\n    \"\"\"\n\n    scale_factor = param.Number(default=1.4, bounds=(1.0, 2.0), step=0.1)\n    step_ratio = param.Integer(default=1, bounds=(1, 10))\n    size_x = param.Range(default=(60, 322), bounds=(10, 500))\n    size_y = param.Range(default=(60, 322), bounds=(10, 500))\n\n    def transform(self, image):\n        detector = get_detector()\n        detected = detector.detect_multi_scale(\n            img=image,\n            scale_factor=self.scale_factor,\n            step_ratio=self.step_ratio,\n            min_size=(self.size_x[0], self.size_y[0]),\n            max_size=(self.size_x[1], self.size_y[1]),\n        )\n\n        for patch in detected:\n            rrr, ccc = rectangle(\n                start=(patch[\"r\"], patch[\"c\"]),\n                extent=(patch[\"height\"], patch[\"width\"]),\n                shape=image.shape[:2],\n            )\n            image[rrr, ccc, 0] = 200\n\n        return image\n\n\ncomponent = VideoStreamInterface(\n    models=[\n        GaussianBlurModel,\n        GrayscaleModel,\n        SobelModel,\n        FaceDetectionModel,\n    ]\n)\npn.Row(pn.Row(component.settings, max_width=300), component)\n\n\npn.template.MaterialTemplate(\n    site=\"Awesome Panel\",\n    title=\"VideoStream with ScikitImage\",\n    sidebar=[component.settings],\n    main=[component],\n).servable()\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/video_stream/index.html#gif",
    "href": "resources/video_stream/index.html#gif",
    "title": "Video Stream",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/video_stream/index.html#mp4",
    "href": "resources/video_stream/index.html#mp4",
    "title": "Video Stream",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/video_stream/index.html#png",
    "href": "resources/video_stream/index.html#png",
    "title": "Video Stream",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/video_stream/index.html#social",
    "href": "resources/video_stream/index.html#social",
    "title": "Video Stream",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/tastymap/index.html",
    "href": "resources/tastymap/index.html",
    "title": "Tasty Map",
    "section": "",
    "text": "TastyMap makes it easy to customize and use colormaps, any way you like.\nThe app is a Panel app.\n\nStar"
  },
  {
    "objectID": "resources/tastymap/index.html#introduction",
    "href": "resources/tastymap/index.html#introduction",
    "title": "Tasty Map",
    "section": "",
    "text": "TastyMap makes it easy to customize and use colormaps, any way you like.\nThe app is a Panel app.\n\nStar"
  },
  {
    "objectID": "resources/tastymap/index.html#app",
    "href": "resources/tastymap/index.html#app",
    "title": "Tasty Map",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/tastymap/index.html#code",
    "href": "resources/tastymap/index.html#code",
    "title": "Tasty Map",
    "section": "Code",
    "text": "Code\ngithub/ahuang11/tastymap"
  },
  {
    "objectID": "resources/tastymap/index.html#gif",
    "href": "resources/tastymap/index.html#gif",
    "title": "Tasty Map",
    "section": "Gif",
    "text": "Gif\nWhat a colorful app!"
  },
  {
    "objectID": "resources/tastymap/index.html#mp4",
    "href": "resources/tastymap/index.html#mp4",
    "title": "Tasty Map",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/tastymap/index.html#png",
    "href": "resources/tastymap/index.html#png",
    "title": "Tasty Map",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/tastymap/index.html#social",
    "href": "resources/tastymap/index.html#social",
    "title": "Tasty Map",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/stumpy/index.html",
    "href": "resources/stumpy/index.html",
    "title": "Stumpy",
    "section": "",
    "text": "STUMPY is a powerful and scalable Python library for identifying repeating patterns in your timeseries. It does this by efficiently computing something called a matrix profile.\nThe app is a Bokeh app wrapped in a nice Panel template.\n\nStar"
  },
  {
    "objectID": "resources/stumpy/index.html#introduction",
    "href": "resources/stumpy/index.html#introduction",
    "title": "Stumpy",
    "section": "",
    "text": "STUMPY is a powerful and scalable Python library for identifying repeating patterns in your timeseries. It does this by efficiently computing something called a matrix profile.\nThe app is a Bokeh app wrapped in a nice Panel template.\n\nStar"
  },
  {
    "objectID": "resources/stumpy/index.html#app",
    "href": "resources/stumpy/index.html#app",
    "title": "Stumpy",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/stumpy/index.html#code",
    "href": "resources/stumpy/index.html#code",
    "title": "Stumpy",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n#!/usr/bin/env python\n\nimport panel as pn\nimport pandas as pd\n\nfrom bokeh.plotting import figure\nfrom bokeh.layouts import layout\nfrom bokeh.models import (\n    ColumnDataSource,\n    Range1d,\n    Slider,\n    Button,\n    TextInput,\n    LabelSet,\n    Circle,\n    Div,\n)\n\nclass StumpyBokehDashboard:\n    def __init__(self):\n        self.sizing_mode = \"stretch_both\"\n        self.window = 0\n        self.m = None\n\n        self.df = None\n        self.ts_cds = None\n        self.quad_cds = None\n        self.pattern_match_cds = None\n        self.dist_cds = None\n        self.circle_cds = None\n\n        self.ts_plot = None\n        self.mp_plot = None\n        self.pm_plot = None\n        self.logo_div = None\n        self.heroku_div = None\n\n        self.slider = None\n        self.play_btn = None\n        self.txt_inp = None\n        self.pattern_btn = None\n        self.match_btn = None\n        self.reset_btn = None\n        self.idx = None\n        self.min_distance_idx = None\n\n        self.animation = pn.state.add_periodic_callback(\n            self.update_animate, 50, start=False\n        )\n\n    def get_df_from_file(self):\n        raw_df = pd.read_csv(\n            \"https://raw.githubusercontent.com/seanlaw/stumpy-live-demo/master/raw.csv\"\n        )\n\n        mp_df = pd.read_csv(\n            \"https://raw.githubusercontent.com/seanlaw/stumpy-live-demo/master/matrix_profile.csv\"\n        )\n\n        self.window = raw_df.shape[0] - mp_df.shape[0] + 1\n        self.m = raw_df.shape[0] - mp_df.shape[0] + 1\n        self.min_distance_idx = mp_df[\"distance\"].argmin()\n\n        df = pd.merge(raw_df, mp_df, left_index=True, how=\"left\", right_index=True)\n\n        return df.reset_index()\n\n    def get_ts_dict(self, df):\n        return self.df.to_dict(orient=\"list\")\n\n    def get_circle_dict(self, df):\n        return self.df[[\"index\", \"y\"]].to_dict(orient=\"list\")\n\n    def get_quad_dict(self, df, pattern_idx=0, match_idx=None):\n        if match_idx is None:\n            match_idx = df.loc[pattern_idx, \"idx\"].astype(int)\n        quad_dict = dict(\n            pattern_left=[pattern_idx],\n            pattern_right=[pattern_idx + self.window - 1],\n            pattern_top=[max(df[\"y\"])],\n            pattern_bottom=[0],\n            match_left=[match_idx],\n            match_right=[match_idx + self.window - 1],\n            match_top=[max(df[\"y\"])],\n            match_bottom=[0],\n            vert_line_left=[pattern_idx - 5],\n            vert_line_right=[pattern_idx + 5],\n            vert_line_top=[max(df[\"distance\"])],\n            vert_line_bottom=[0],\n            hori_line_left=[0],\n            hori_line_right=[max(df[\"index\"])],\n            hori_line_top=[df.loc[pattern_idx, \"distance\"] - 0.01],\n            hori_line_bottom=[df.loc[pattern_idx, \"distance\"] + 0.01],\n        )\n        return quad_dict\n\n    def get_custom_quad_dict(self, df, pattern_idx=0, match_idx=None):\n        if match_idx is None:\n            match_idx = df.loc[pattern_idx, \"idx\"].astype(int)\n        quad_dict = dict(\n            pattern_left=[pattern_idx],\n            pattern_right=[pattern_idx + self.window - 1],\n            pattern_top=[max(df[\"y\"])],\n            pattern_bottom=[0],\n            match_left=[match_idx],\n            match_right=[match_idx + self.window - 1],\n            match_top=[max(df[\"y\"])],\n            match_bottom=[0],\n            vert_line_left=[match_idx - 5],\n            vert_line_right=[match_idx + 5],\n            vert_line_top=[max(df[\"distance\"])],\n            vert_line_bottom=[0],\n            hori_line_left=[0],\n            hori_line_right=[max(df[\"index\"])],\n            hori_line_top=[df.loc[match_idx, \"distance\"] - 0.01],\n            hori_line_bottom=[df.loc[match_idx, \"distance\"] + 0.01],\n        )\n        return quad_dict\n\n    def get_pattern_match_dict(self, df, pattern_idx=0, match_idx=None):\n        if match_idx is None:\n            match_idx = df[\"idx\"].loc[pattern_idx].astype(int)\n        pattern_match_dict = dict(\n            index=list(range(self.window)),\n            pattern=df[\"y\"].loc[pattern_idx : pattern_idx + self.window - 1],\n            match=df[\"y\"].loc[match_idx : match_idx + self.window - 1],\n        )\n\n        return pattern_match_dict\n\n    def get_ts_plot(self, color=\"black\"):\n        \"\"\"\n        Time Series Plot\n        \"\"\"\n        ts_plot = figure(\n            toolbar_location=\"above\",\n            sizing_mode=self.sizing_mode,\n            title=\"Raw Time Series or Sequence\",\n            tools=[\"reset\"],\n        )\n        q = ts_plot.quad(\n            \"pattern_left\",\n            \"pattern_right\",\n            \"pattern_top\",\n            \"pattern_bottom\",\n            source=self.quad_cds,\n            name=\"pattern_quad\",\n            color=\"#54b847\",\n        )\n        q.visible = False\n        q = ts_plot.quad(\n            \"match_left\",\n            \"match_right\",\n            \"match_top\",\n            \"match_bottom\",\n            source=self.quad_cds,\n            name=\"match_quad\",\n            color=\"#696969\",\n            alpha=0.5,\n        )\n        q.visible = False\n        l = ts_plot.line(x=\"index\", y=\"y\", source=self.ts_cds, color=color)\n        ts_plot.x_range = Range1d(\n            0, max(self.df[\"index\"]), bounds=(0, max(self.df[\"x\"]))\n        )\n        ts_plot.y_range = Range1d(0, max(self.df[\"y\"]), bounds=(0, max(self.df[\"y\"])))\n\n        c = ts_plot.circle(\n            x=\"index\", y=\"y\", source=self.circle_cds, size=0, line_color=\"white\"\n        )\n        c.selection_glyph = Circle(line_color=\"white\")\n        c.nonselection_glyph = Circle(line_color=\"white\")\n\n        return ts_plot\n\n    def get_dist_dict(self, df, pattern_idx=0):\n        dist = df[\"distance\"]\n        max_dist = dist.max()\n        min_dist = dist.min()\n        x_offset = self.df.shape[0] - self.window / 2\n        y_offset = max_dist / 2\n        distance = dist.loc[pattern_idx]\n        text = distance.round(1).astype(str)\n        gauge_dict = dict(x=[0 + x_offset], y=[0 + y_offset], text=[text])\n\n        return gauge_dict\n\n    def get_mp_plot(self):\n        \"\"\"\n        Matrix Profile Plot\n        \"\"\"\n        mp_plot = figure(\n            x_range=self.ts_plot.x_range,\n            toolbar_location=None,\n            sizing_mode=self.sizing_mode,\n            title=\"Matrix Profile (All Minimum Distances)\",\n        )\n        q = mp_plot.quad(\n            \"vert_line_left\",\n            \"vert_line_right\",\n            \"vert_line_top\",\n            \"vert_line_bottom\",\n            source=self.quad_cds,\n            name=\"pattern_start\",\n            color=\"#54b847\",\n        )\n        q.visible = False\n        q = mp_plot.quad(\n            \"hori_line_left\",\n            \"hori_line_right\",\n            \"hori_line_top\",\n            \"hori_line_bottom\",\n            source=self.quad_cds,\n            name=\"match_dist\",\n            color=\"#696969\",\n            alpha=0.5,\n        )\n        q.visible = False\n        mp_plot.line(x=\"index\", y=\"distance\", source=self.ts_cds, color=\"black\")\n        # mp_plot.x_range = Range1d(0, self.df.shape[0]-self.window+1, bounds=(0, self.df.shape[0]-self.window+1))\n        mp_plot.x_range = Range1d(\n            0, self.df.shape[0] + 1, bounds=(0, self.df.shape[0] + 1)\n        )\n        mp_plot.y_range = Range1d(\n            0, max(self.df[\"distance\"]), bounds=(0, max(self.df[\"distance\"]))\n        )\n\n        label = LabelSet(\n            x=\"x\",\n            y=\"y\",\n            text=\"text\",\n            source=self.dist_cds,\n            text_align=\"center\",\n            name=\"gauge_label\",\n            text_color=\"black\",\n            text_font_size=\"30pt\",\n        )\n        mp_plot.add_layout(label)\n\n        return mp_plot\n\n    def get_pm_plot(self):\n        \"\"\"\n        Pattern-Match Plot\n        \"\"\"\n        pm_plot = figure(\n            toolbar_location=None,\n            sizing_mode=self.sizing_mode,\n            title=\"Pattern Match Overlay\",\n        )\n        l = pm_plot.line(\n            \"index\",\n            \"pattern\",\n            source=self.pattern_match_cds,\n            name=\"pattern_line\",\n            color=\"#54b847\",\n            line_width=2,\n        )\n        l.visible = False\n        l = pm_plot.line(\n            \"index\",\n            \"match\",\n            source=self.pattern_match_cds,\n            name=\"match_line\",\n            color=\"#696969\",\n            alpha=0.5,\n            line_width=2,\n        )\n        l.visible = False\n\n        return pm_plot\n\n    def get_logo_div(self):\n        \"\"\"\n        STUMPY logo\n        \"\"\"\n\n        logo_div = Div(\n            text=\"&lt;a href='https://stumpy.readthedocs.io/en/latest/'&gt;&lt;img src='https://raw.githubusercontent.com/TDAmeritrade/stumpy/main/docs/images/stumpy_logo_small.png' style='width:100%'&gt;&lt;/a&gt;\", sizing_mode=\"stretch_width\"\n        )\n\n        return logo_div\n\n    def get_heroku_div(self):\n        \"\"\"\n        STUMPY Heroku App Link\n        \"\"\"\n\n        heroku_div = Div(text=\"http://tiny.cc/stumpy-demo\")\n\n        return heroku_div\n\n    def get_slider(self, value=0):\n        slider = Slider(\n            start=0.0,\n            end=max(self.df[\"index\"]) - self.window,\n            value=value,\n            step=1,\n            title=\"Subsequence\",\n            sizing_mode=self.sizing_mode,\n        )\n        return slider\n\n    def get_play_button(self):\n        play_btn = Button(label=\"► Play\")\n        play_btn.on_click(self.animate)\n        return play_btn\n\n    def get_text_input(self):\n        txt_inp = TextInput(sizing_mode=self.sizing_mode)\n        return txt_inp\n\n    def get_buttons(self):\n        pattern_btn = Button(label=\"Show Motif\", sizing_mode=self.sizing_mode)\n        match_btn = Button(label=\"Show Nearest Neighbor\", sizing_mode=self.sizing_mode)\n        reset_btn = Button(label=\"Reset\", sizing_mode=self.sizing_mode, button_type=\"primary\")\n        return pattern_btn, match_btn, reset_btn\n\n    def update_plots(self, attr, new, old):\n        self.quad_cds.data = self.get_quad_dict(self.df, self.slider.value)\n        self.pattern_match_cds.data = self.get_pattern_match_dict(\n            self.df, self.slider.value\n        )\n        self.dist_cds.data = self.get_dist_dict(self.df, self.slider.value)\n\n    def custom_update_plots(self, attr, new, old):\n        self.quad_cds.data = self.get_custom_quad_dict(\n            self.df, self.pattern_idx, self.slider.value\n        )\n        self.pattern_match_cds.data = self.get_pattern_match_dict(\n            self.df, self.pattern_idx, self.slider.value\n        )\n        self.dist_cds.data = self.get_dist_dict(self.df, self.slider.value)\n        dist = self.df[\"distance\"].loc[self.slider.value]\n\n    def show_hide_pattern(self):\n        pattern_quad = self.ts_plot.select(name=\"pattern_quad\")[0]\n        pattern_start = self.mp_plot.select(name=\"pattern_start\")[0]\n        pattern_line = self.pm_plot.select(name=\"pattern_line\")[0]\n        if pattern_quad.visible:\n            pattern_start.visible = False\n            pattern_line.visible = False\n            pattern_quad.visible = False\n            self.pattern_btn.label = \"Show Motif\"\n        else:\n            pattern_start.visible = True\n            pattern_line.visible = True\n            pattern_quad.visible = True\n            self.pattern_btn.label = \"Hide Motif\"\n\n    def show_hide_match(self):\n        match_quad = self.ts_plot.select(name=\"match_quad\")[0]\n        match_dist = self.mp_plot.select(name=\"match_dist\")[0]\n        match_line = self.pm_plot.select(name=\"match_line\")[0]\n        if match_quad.visible:\n            match_dist.visible = False\n            match_line.visible = False\n            match_quad.visible = False\n            self.match_btn.label = \"Show Nearest Neighbor\"\n        else:\n            match_dist.visible = True\n            match_line.visible = True\n            match_quad.visible = True\n            self.match_btn.label = \"Hide Nearest Neighbor\"\n\n    def update_slider(self, attr, old, new):\n        self.slider.value = int(self.txt_inp.value)\n\n    def animate(self):\n        if self.play_btn.label == \"► Play\":\n            self.play_btn.label = \"❚❚ Pause\"\n            self.animation.start()\n        else:\n            self.play_btn.label = \"► Play\"\n            self.animation.stop()\n\n    def update_animate(self, shift=50):\n        if self.window &lt; self.m:  # Probably using box select\n            start = self.slider.value\n            end = start + shift\n            if self.df.loc[start:end, \"distance\"].min() &lt;= 15:\n                self.slider.value = self.df.loc[start:end, \"distance\"].idxmin()\n                self.animate()\n            elif self.slider.value + shift &lt;= self.slider.end:\n                self.slider.value = self.slider.value + shift\n            else:\n                self.slider.value = 0\n        elif self.slider.value + shift &lt;= self.slider.end:\n            self.slider.value = self.slider.value + shift\n        else:\n            self.slider.value = 0\n\n    def reset(self):\n        self.sizing_mode = \"stretch_both\"\n        self.window = self.m\n\n        self.default_idx = self.min_distance_idx\n        self.df = self.get_df_from_file()\n        self.ts_cds.data = self.get_ts_dict(self.df)\n        self.mp_plot.y_range.end = max(self.df[\"distance\"])\n        self.mp_plot.title.text = \"Matrix Profile (All Minimum Distances)\"\n        self.mp_plot.y_range.bounds = (0, max(self.df[\"distance\"]))\n        self.quad_cds.data = self.get_quad_dict(self.df, pattern_idx=self.default_idx)\n        self.pattern_match_cds.data = self.get_pattern_match_dict(\n            self.df, pattern_idx=self.default_idx\n        )\n        self.dist_cds.data = self.get_dist_dict(self.df, pattern_idx=self.default_idx)\n        self.circle_cds.data = self.get_circle_dict(self.df)\n        # Remove callback and add old callback\n        if self.custom_update_plots in self.slider._callbacks[\"value\"]:\n            self.slider.remove_on_change(\"value\", self.custom_update_plots)\n            self.slider.on_change(\"value\", self.update_plots)\n        self.slider.end = self.df.shape[0] - self.window\n        self.slider.value = self.default_idx\n\n    def get_data(self):\n        self.df = self.get_df_from_file()\n        self.default_idx = self.min_distance_idx\n        self.ts_cds = ColumnDataSource(self.get_ts_dict(self.df))\n        self.quad_cds = ColumnDataSource(\n            self.get_quad_dict(self.df, pattern_idx=self.default_idx)\n        )\n        self.pattern_match_cds = ColumnDataSource(\n            self.get_pattern_match_dict(self.df, pattern_idx=self.default_idx)\n        )\n        self.dist_cds = ColumnDataSource(\n            self.get_dist_dict(self.df, pattern_idx=self.default_idx)\n        )\n        self.circle_cds = ColumnDataSource(self.get_circle_dict(self.df))\n\n    def get_plots(self, ts_plot_color=\"black\"):\n        self.ts_plot = self.get_ts_plot(color=ts_plot_color)\n        self.mp_plot = self.get_mp_plot()\n        self.pm_plot = self.get_pm_plot()\n\n    def get_widgets(self):\n        self.slider = self.get_slider(value=self.default_idx)\n        self.play_btn = self.get_play_button()\n        self.txt_inp = self.get_text_input()\n        self.pattern_btn, self.match_btn, self.reset_btn = self.get_buttons()\n        self.logo_div = self.get_logo_div()\n        self.heroku_div = self.get_heroku_div()\n\n    def set_callbacks(self):\n        self.slider.on_change(\"value\", self.update_plots)\n        self.pattern_btn.on_click(self.show_hide_pattern)\n        self.show_hide_pattern()\n        self.match_btn.on_click(self.show_hide_match)\n        self.show_hide_match()\n        self.reset_btn.on_click(self.reset)\n        self.txt_inp.on_change(\"value\", self.update_slider)\n\n    def get_layout(self):\n        self.get_data()\n        self.get_plots()\n        self.get_widgets()\n        self.set_callbacks()\n\n        l = layout(\n            [\n                [self.ts_plot],\n                [self.mp_plot],\n                [self.pm_plot],\n                [self.slider],\n                [self.pattern_btn, self.match_btn, self.play_btn, self.logo_div],\n            ],\n            sizing_mode=self.sizing_mode,\n        )\n\n        return l\n\n    def get_raw_layout(self):\n        self.get_data()\n        self.get_plots(ts_plot_color=\"#54b847\")\n\n        l = layout([[self.ts_plot], [self.mp_plot]], sizing_mode=self.sizing_mode)\n\n        return l\n\n\ndashboard = StumpyBokehDashboard()\n\ndef get_components(dashboard: StumpyBokehDashboard=dashboard):\n    dashboard.get_data()\n    dashboard.get_plots()\n    dashboard.get_widgets()\n    dashboard.set_callbacks()\n\n    logo = dashboard.logo_div\n    settings = layout(\n        dashboard.pattern_btn,\n        dashboard.match_btn,\n        dashboard.play_btn,\n        dashboard.slider,\n        height=150,\n        sizing_mode=\"stretch_width\",\n    )\n    main = layout(\n        [\n            [dashboard.ts_plot],\n            [dashboard.mp_plot],\n            [dashboard.pm_plot],\n        ],\n        sizing_mode=dashboard.sizing_mode,\n    )\n    return logo, settings, main\n\npn.extension(template=\"fast\")\npn.state.template.param.update(\n    site_url=\"https://awesome-panel.org\",\n    site=\"Awesome Panel\",\n    title=\"Stumpy Timeseries Analysis\",\n    favicon=\"https://raw.githubusercontent.com/MarcSkovMadsen/awesome-panel-assets/320297ccb92773da099f6b97d267cc0433b67c23/favicon/ap-1f77b4.ico\",\n    header_background=\"#459db9\",\n    theme_toggle=False,\n)\n\nlogo, settings, main = get_components()\n\npn.Column(\n    logo,\n    settings, sizing_mode=\"stretch_width\",\n).servable(target=\"sidebar\")\npn.panel(main, sizing_mode=\"stretch_both\", max_height=800).servable(target=\"main\")\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/stumpy/index.html#gif",
    "href": "resources/stumpy/index.html#gif",
    "title": "Stumpy",
    "section": "Gif",
    "text": "Gif\nI think the app looks amazing. Its really performant too."
  },
  {
    "objectID": "resources/stumpy/index.html#mp4",
    "href": "resources/stumpy/index.html#mp4",
    "title": "Stumpy",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/stumpy/index.html#png",
    "href": "resources/stumpy/index.html#png",
    "title": "Stumpy",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/stumpy/index.html#social",
    "href": "resources/stumpy/index.html#social",
    "title": "Stumpy",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/standa/index.html",
    "href": "resources/standa/index.html",
    "title": "Standa - Stock Analysis Dashboard",
    "section": "",
    "text": "The Standa Stock Analysis Dashboards by Fayssal El Mofatiche is an example of a large, nicely polished Panel app."
  },
  {
    "objectID": "resources/standa/index.html#introduction",
    "href": "resources/standa/index.html#introduction",
    "title": "Standa - Stock Analysis Dashboard",
    "section": "",
    "text": "The Standa Stock Analysis Dashboards by Fayssal El Mofatiche is an example of a large, nicely polished Panel app."
  },
  {
    "objectID": "resources/standa/index.html#app",
    "href": "resources/standa/index.html#app",
    "title": "Standa - Stock Analysis Dashboard",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/standa/index.html#gif",
    "href": "resources/standa/index.html#gif",
    "title": "Standa - Stock Analysis Dashboard",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/standa/index.html#png",
    "href": "resources/standa/index.html#png",
    "title": "Standa - Stock Analysis Dashboard",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/standa/index.html#social",
    "href": "resources/standa/index.html#social",
    "title": "Standa - Stock Analysis Dashboard",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/panel_chat_examples/index.html",
    "href": "resources/panel_chat_examples/index.html",
    "title": "Panel Chat Examples",
    "section": "",
    "text": "Panel Chat Examples provides example Panel Chat Apps.\nPanels Chat Components are multi modal and supports LangChain, OpenAI, Mistral, Llama, etc.\n\nStar"
  },
  {
    "objectID": "resources/panel_chat_examples/index.html#introduction",
    "href": "resources/panel_chat_examples/index.html#introduction",
    "title": "Panel Chat Examples",
    "section": "",
    "text": "Panel Chat Examples provides example Panel Chat Apps.\nPanels Chat Components are multi modal and supports LangChain, OpenAI, Mistral, Llama, etc.\n\nStar"
  },
  {
    "objectID": "resources/panel_chat_examples/index.html#mp4",
    "href": "resources/panel_chat_examples/index.html#mp4",
    "title": "Panel Chat Examples",
    "section": "MP4",
    "text": "MP4"
  },
  {
    "objectID": "resources/panel_chat_examples/index.html#social",
    "href": "resources/panel_chat_examples/index.html#social",
    "title": "Panel Chat Examples",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html",
    "href": "resources/lonboard_dashboard/index.html",
    "title": "Lonboard Dashboard",
    "section": "",
    "text": "Lonboard is a Python library for fast, interactive geospatial vector data visualization in Jupyter. But it also works with Panel. This Dashboard demonstrates that."
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#introduction",
    "href": "resources/lonboard_dashboard/index.html#introduction",
    "title": "Lonboard Dashboard",
    "section": "",
    "text": "Lonboard is a Python library for fast, interactive geospatial vector data visualization in Jupyter. But it also works with Panel. This Dashboard demonstrates that."
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#app",
    "href": "resources/lonboard_dashboard/index.html#app",
    "title": "Lonboard Dashboard",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#code",
    "href": "resources/lonboard_dashboard/index.html#code",
    "title": "Lonboard Dashboard",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"Panel data app based on https://developmentseed.org/lonboard/latest/examples/north-america-roads/\"\"\"\n# pip install panel colorcet ipywidgets_bokeh geopandas palettable lonboard\nimport colorcet as cc\nimport geopandas as gpd\n\nfrom lonboard import Map, PathLayer\nfrom lonboard.colormap import apply_continuous_cmap\nfrom palettable.palette import Palette\n\nimport panel as pn\n\nurl = \"https://naciscdn.org/naturalearth/10m/cultural/ne_10m_roads_north_america.zip\"\npath = \"ne_10m_roads_north_america.zip\"\n\ntry:\n    gdf = pn.state.as_cached(\n        \"ne_10m_roads_north_america\", gpd.read_file, filename=path, engine=\"pyogrio\"\n    )\nexcept:\n    gdf = pn.state.as_cached(\n        \"ne_10m_roads_north_america\", gpd.read_file, filename=url, engine=\"pyogrio\"\n    )\n\nstate_options = sorted(state for state in gdf[\"state\"].unique() if state)\n\n\ndef to_rgb(hex: str) -&gt; list:\n    h = hex.strip(\"#\")\n    return list(int(h[i : i + 2], 16) for i in (0, 2, 4))\n\n\ndef to_palette(cmap) -&gt; Palette:\n    \"\"\"Returns the ColorCet colormap as a palettable Palette\"\"\"\n    colors = [to_rgb(item) for item in cmap]\n    return Palette(name=\"colorcet\", map_type=\"colorcet\", colors=colors)\n\n\ndef create_map(state=\"California\", cmap=cc.fire, alpha=0.8):\n    palette = to_palette(cmap)\n    data = gdf[gdf[\"state\"] == state]\n    layer = PathLayer.from_geopandas(data, width_min_pixels=0.8)\n    normalized_scale_rank = (data[\"scalerank\"] - 3) / 9\n    layer.get_color = apply_continuous_cmap(normalized_scale_rank, palette, alpha=alpha)\n    map_ = Map(layers=[layer], _height=650)\n    return map_\n\n\ndescription = \"\"\"# lonboard\n\nA Python library for **fast, interactive geospatial vector data visualization** in Jupyter (and Panel).\n\nBy utilizing new technologies like `GeoArrow` and `GeoParquet` in conjunction with GPU-based map rendering, lonboard aims to enable visualizing large geospatial datasets interactively through a simple interface.\"\"\"\n\n\n# THE PANEL APP\npn.extension(\"ipywidgets\")\nstate = pn.widgets.Select(\n    value=\"California\",\n    options=state_options,\n    width=150,\n    name=\"State\",\n    sizing_mode=\"stretch_width\",\n)\ncmap = pn.widgets.ColorMap(\n    value=cc.fire,\n    options=cc.palette,\n    ncols=3,\n    swatch_width=100,\n    name=\"cmap by Colorcet\",\n    sizing_mode=\"stretch_width\",\n)\nalpha = pn.widgets.FloatSlider(\n    value=0.8, start=0, end=1, name=\"Alpha\", min_width=100, sizing_mode=\"stretch_width\"\n)\nlogo = pn.pane.Image(\n    \"https://github.com/developmentseed/lonboard/raw/main/assets/dalle-lonboard.jpg\"\n)\ndef title(state):\n    return f\"# North America Roads: {state}\"\n\nsettings = pn.Column(state, cmap, alpha)\ndescription = pn.Column(pn.pane.Markdown(description, margin=5), logo)\ncomponent = pn.Column(\n    pn.bind(title, state=state),\n    pn.panel(\n        pn.bind(create_map, state=state, cmap=cmap, alpha=alpha.param.value_throttled),\n        sizing_mode=\"stretch_both\",\n    ),\n    sizing_mode=\"stretch_both\",\n)\npn.template.FastListTemplate(\n    logo=\"https://panel.holoviz.org/_static/logo_horizontal_dark_theme.png\",\n    title=\"Works with LonBoard\",\n    main=[component],\n    sidebar=[description, settings],\n).servable()\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#gif",
    "href": "resources/lonboard_dashboard/index.html#gif",
    "title": "Lonboard Dashboard",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#png",
    "href": "resources/lonboard_dashboard/index.html#png",
    "title": "Lonboard Dashboard",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#mp4",
    "href": "resources/lonboard_dashboard/index.html#mp4",
    "title": "Lonboard Dashboard",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#social",
    "href": "resources/lonboard_dashboard/index.html#social",
    "title": "Lonboard Dashboard",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html",
    "href": "resources/crossfiltering_holoviews/index.html",
    "title": "Crossfiltering with HoloViews",
    "section": "",
    "text": "Crossfiltering lets you interact with one chart and apply that interaction as a filter to other charts in the report.\nWith HoloViews you can add crossfiltering to your hvPlot or Holoviews plots. Check out the Linked Brushing Reference Guide."
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#introduction",
    "href": "resources/crossfiltering_holoviews/index.html#introduction",
    "title": "Crossfiltering with HoloViews",
    "section": "",
    "text": "Crossfiltering lets you interact with one chart and apply that interaction as a filter to other charts in the report.\nWith HoloViews you can add crossfiltering to your hvPlot or Holoviews plots. Check out the Linked Brushing Reference Guide."
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#app",
    "href": "resources/crossfiltering_holoviews/index.html#app",
    "title": "Crossfiltering with HoloViews",
    "section": "App",
    "text": "App\nThe apps below run entirely in the browser via Pyodide and panel convert.\n\nBokeh\nOpen in a new window | Open in Hugging Face Spaces\n\n\n\n\nPlotly\nFor the Plotly backend I cannot get responsive plots working. That is why I use fixed sizes. See Panel #6173.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#code",
    "href": "resources/crossfiltering_holoviews/index.html#code",
    "title": "Crossfiltering with HoloViews",
    "section": "Code",
    "text": "Code\n\n\nShow Bokeh\n\n\"\"\"*Linked Brushing* is a very powerful technique. It's also often called\n*Linked Selections* or *Crossfiltering*.\n\nThis example is inspired by the HoloViews [Linked Brushing Reference Guide]\\\n(http://holoviews.org/user_guide/Linked_Brushing.html) and the Plotly blog post\n[Introducing Dash HoloViews]\\\n(https://medium.com/plotly/introducing-dash-holoviews-6a05c088ebe5).\n\nThis example uses the *Iris* dataset.\n\"\"\"\nfrom typing import Tuple\n\nimport holoviews as hv\nimport pandas as pd\nimport panel as pn\nfrom holoviews import opts\nfrom panel.template import FastListTemplate\n\n\n@pn.cache\ndef get_iris_data():\n    return pd.read_csv(\"https://cdn.awesome-panel.org/resources/crossfiltering_holoviews/iris.csv.gz\")\n\n\nACCENT = \"#F08080\"\n\nCSS = \"\"\"\n.main .card-margin.stretch_both {\n    height: calc(50vh - 65px) !important;\n}\n\"\"\"\nif not CSS in pn.config.raw_css:\n    pn.config.raw_css.append(CSS)\n\nBOKEH_TOOLS = {\n    \"tools\": [\"hover\"], \"active_tools\": [\"box_select\"]\n}\n\n\ndef get_linked_plots() -&gt; Tuple:\n    \"\"\"Returns a tuple (scatter, hist) of linked plots\n    \n    See http://holoviews.org/user_guide/Linked_Brushing.html\n    \"\"\"\n\n    dataset = hv.Dataset(get_iris_data())\n\n    scatter = hv.Scatter(dataset, kdims=[\"sepal_length\"], vdims=[\"sepal_width\"])\n    hist = hv.operation.histogram(dataset, dimension=\"petal_width\", normed=False)\n\n    # pylint: disable=no-value-for-parameter\n    selection_linker = hv.selection.link_selections.instance()\n    # pylint: disable=no-member\n    scatter = selection_linker(scatter).opts(\n        opts.Scatter(color=ACCENT, responsive=True, size=10, **BOKEH_TOOLS),\n    )\n    hist = selection_linker(hist).opts(\n        opts.Histogram(color=ACCENT, responsive=True, **BOKEH_TOOLS)\n    )\n\n    return scatter, hist\n\n\ndef create_app():\n    \"\"\"Returns the app in a nice FastListTemplate\"\"\"\n    scatter, hist = get_linked_plots()\n    scatter_panel = pn.pane.HoloViews(scatter, sizing_mode=\"stretch_both\")\n    hist_panel = pn.pane.HoloViews(hist, sizing_mode=\"stretch_both\")\n    \n    template = FastListTemplate(\n        site=\"Awesome Panel\",\n        site_url=\"https://awesome-panel.org\",\n        title=\"Crossfiltering with HoloViews and Bokeh\",\n        accent=ACCENT,\n        main=[\n            # We need to wrap in Columns to get them to stretch properly\n            pn.Column(scatter_panel, sizing_mode=\"stretch_both\"),\n            pn.Column(hist_panel, sizing_mode=\"stretch_both\"),\n        ],\n    )\n    return template\n\npn.extension()\nhv.extension(\"bokeh\")\ncreate_app().servable()\n\n\n\nShow Plotly\n\n\"\"\"*Linked Brushing* is a very powerful technique. It's also often called\n*Linked Selections* or *Crossfiltering*.\n\nThis example is inspired by the HoloViews [Linked Brushing Reference Guide]\\\n(http://holoviews.org/user_guide/Linked_Brushing.html) and the Plotly blog post\n[Introducing Dash HoloViews]\\\n(https://medium.com/plotly/introducing-dash-holoviews-6a05c088ebe5).\n\nThis example uses the *Iris* dataset.\n\"\"\"\nfrom typing import Tuple\n\nimport holoviews as hv\nimport panel as pn\nfrom holoviews import opts\nfrom panel.template import FastListTemplate\nimport plotly.io as pio\nimport pandas as pd\n\n@pn.cache\ndef get_iris_data():\n    return pd.read_csv(\"https://cdn.awesome-panel.org/resources/crossfiltering_holoviews/iris.csv.gz\")\n\n\nACCENT = \"#F08080\"\n\nCSS = \"\"\"\n.main .card-margin.stretch_both {\n    height: calc(100vh - 125px) !important;\n}\n\"\"\"\n\ndef _plotly_hooks(plot, element):\n    \"\"\"Used by HoloViews to give plots plotly plots special treatment\"\"\"\n    fig = plot.state\n    \n    fig[\"layout\"][\"dragmode\"] = \"select\"\n    fig[\"config\"][\"displayModeBar\"] = True\n    if isinstance(element, hv.Histogram):\n        # Constrain histogram selection direction to horizontal\n        fig[\"layout\"][\"selectdirection\"] = \"h\"\n\n\ndef get_linked_plots() -&gt; Tuple:\n    \"\"\"Returns a tuple (scatter, hist) of linked plots\n    \n    See http://holoviews.org/user_guide/Linked_Brushing.html\n    \"\"\"\n\n    dataset = hv.Dataset(get_iris_data())\n\n    scatter = hv.Scatter(dataset, kdims=[\"sepal_length\"], vdims=[\"sepal_width\"])\n    hist = hv.operation.histogram(dataset, dimension=\"petal_width\", normed=False)\n\n    # pylint: disable=no-value-for-parameter\n    selection_linker = hv.selection.link_selections.instance()\n    # pylint: disable=no-member\n    scatter = selection_linker(scatter).opts(\n        opts.Scatter(color=ACCENT, size=10, hooks=[_plotly_hooks], width=700, height=400),\n    )\n    hist = selection_linker(hist).opts(\n        opts.Histogram(color=ACCENT, hooks=[_plotly_hooks], width=700, height=400)\n    )\n\n    return scatter, hist\n\n\ndef create_app():\n    \"\"\"Returns the app in a nice FastListTemplate\"\"\"\n    if pn.config.theme == \"dark\":\n        pio.templates.default = \"plotly_dark\"\n    else:\n        pio.templates.default = \"plotly_white\"\n    scatter, hist = get_linked_plots()\n    scatter_panel = pn.pane.HoloViews(scatter, sizing_mode=\"stretch_both\", backend=\"plotly\")\n    hist_panel = pn.pane.HoloViews(hist, sizing_mode=\"stretch_both\", backend=\"plotly\")\n\n    def reset(event):\n        scatter, hist = get_linked_plots()\n        scatter_panel.object=scatter\n        hist_panel.object=hist\n\n    reset_button = pn.widgets.Button(name=\"RESET PLOTS\", on_click=reset, description=\"Resets the plots. Plotly does not have a built in way to do this.\")\n    \n    template = FastListTemplate(\n        site=\"Awesome Panel\",\n        site_url=\"https://awesome-panel.org\",\n        title=\"Crossfiltering with HoloViews and Plotly\",\n        accent=ACCENT,\n        main=[\n            # We need to wrap in Columns to get them to stretch properly\n            pn.Column(reset_button, scatter_panel, pn.layout.Spacer(height=20), hist_panel, height=870, sizing_mode=\"stretch_width\"),\n        ],\n        main_max_width=\"850px\",\n    )\n    return template\n\npn.extension(\"plotly\", raw_css=[CSS])\nhv.extension(\"plotly\")\ncreate_app().servable()"
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#gif",
    "href": "resources/crossfiltering_holoviews/index.html#gif",
    "title": "Crossfiltering with HoloViews",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#mp4",
    "href": "resources/crossfiltering_holoviews/index.html#mp4",
    "title": "Crossfiltering with HoloViews",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#png",
    "href": "resources/crossfiltering_holoviews/index.html#png",
    "title": "Crossfiltering with HoloViews",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#social",
    "href": "resources/crossfiltering_holoviews/index.html#social",
    "title": "Crossfiltering with HoloViews",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html",
    "href": "resources/classic_dashboard/classic_dashboard.html",
    "title": "Classic Dashboard",
    "section": "",
    "text": "The app shows you how to create a Classic Dashboard in Panel with\n\nClassic Layout and design\nResponsiveness\nUser Selections"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#introduction",
    "href": "resources/classic_dashboard/classic_dashboard.html#introduction",
    "title": "Classic Dashboard",
    "section": "",
    "text": "The app shows you how to create a Classic Dashboard in Panel with\n\nClassic Layout and design\nResponsiveness\nUser Selections"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#app",
    "href": "resources/classic_dashboard/classic_dashboard.html#app",
    "title": "Classic Dashboard",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#code",
    "href": "resources/classic_dashboard/classic_dashboard.html#code",
    "title": "Classic Dashboard",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"\nSee https://awesome-panel.org/resources/classic_dashboard/\n\"\"\"\nimport pathlib\n\nimport holoviews as hv\nimport hvplot.pandas  # pylint: disable=unused-import\nimport pandas as pd\nimport panel as pn\nimport param\nfrom holoviews.plotting.util import process_cmap\n\nDASHBOARD_A_PATH=\"https://cdn.awesome-panel.org/resources/classic_dashboard/dashboard_A.csv\"\nDASHBOARD_B_PATH=\"https://cdn.awesome-panel.org/resources/classic_dashboard/dashboard_B.csv\"\n\nCOLOR_MAPS = hv.plotting.util.list_cmaps()\nSTYLE = \"\"\"\nbody {\n    margin: 0px;\n    min-height: 100vh;\n    overflow-x: hidden;\n    width: 100%;\n    background: #f2f2f2;\n}\n.bk.app-body {\n    background: #f2f2f2;\n    color: #000000;\n    font-family: roboto, sans-serif, Verdana;\n}\n.bk.app-bar {\n    background: #212121;\n    border-color: white;\n    box-shadow: 5px 5px 20px #9E9E9E;\n    color: #ffffff;\n    z-index: 50;\n}\n.bk.app-container {\n    background: #ffffff;\n    border-radius: 5px;\n    box-shadow: 2px 2px 2px lightgrey;\n    color: #000000;\n}\n\n.bk.app-settings {\n    background: #e0e0e0;\n    color: #000000;\n}\n\n\"\"\"\n\n@pn.cache\ndef _get_data_a():\n    return pd.read_csv(DASHBOARD_A_PATH, index_col=0)\n\n@pn.cache\ndef _get_data_b():\n    return pd.read_csv(DASHBOARD_B_PATH, index_col=0)\n\n\nclass Dashboard(pn.viewable.Viewer):\n    \"\"\"This application show cases how to build a Classic Dashboard\n    in Panel.\n    \"\"\"\n\n    tool = param.ObjectSelector(label=\"Tool\", default=\"S1_1\", objects=[\"S1_1\", \"S2_1\"])\n    variable = param.ObjectSelector(\n        label=\"Variable\",\n        default=\"Cut Distance\",\n        objects=[\"Cut Distance\", \"Removed Volume\", \"Av. uncut chip thickness\"],\n    )\n    color_map = param.ObjectSelector(default=\"rainbow\", objects=COLOR_MAPS)\n\n    view = param.ClassSelector(class_=pn.Column)\n\n    def __init__(self, **params):\n        super().__init__(**params)\n\n        self.insert_plot_pane = pn.pane.HoloViews(\n            self._get_insert_plot, sizing_mode=\"stretch_width\", margin=10, height=300\n        )\n        self.edge_plot_pane = pn.pane.HoloViews(\n            self._get_edge_plot, sizing_mode=\"stretch_width\", margin=10, height=300\n        )\n        self.history_plot_pane = pn.pane.HoloViews(\n            self._update_history_plot, sizing_mode=\"stretch_width\", margin=10, height=300\n        )\n        self.view = pn.Column(sizing_mode=\"stretch_both\")\n        self._init_view()\n\n    def _init_view(self):\n        appbar = pn.Row(\n            pn.pane.Markdown(\n                \"#### Classic Dashboard in Panel \",\n                margin=(15, 5, 5, 25),\n                sizing_mode=\"stretch_width\",\n                align=\"center\",\n            ),\n            pn.layout.HSpacer(height=0),\n            pn.pane.PNG(\n                \"https://panel.holoviz.org/_static/logo_horizontal.png\",\n                width=200,\n                align=\"center\",\n                sizing_mode=\"fixed\",\n                margin=(10, 50, 10, 5),\n                embed=False,\n            ),\n            sizing_mode=\"stretch_width\",\n            css_classes=[\"app-bar\"],\n        )\n        settings_bar = pn.Column(\n            pn.Param(\n                self,\n                parameters=[\"tool\", \"variable\", \"color_map\"],\n                widgets={\n                    \"tool\": {\"align\": \"center\", \"width\": 75, \"sizing_mode\": \"fixed\"},\n                    \"variable\": {\n                        \"type\": pn.widgets.RadioBoxGroup,\n                        \"inline\": True,\n                        \"align\": \"end\",\n                        \"sizing_mode\": \"stretch_width\",\n                    },\n                },\n                default_layout=pn.Row,\n                show_name=False,\n                sizing_mode=\"stretch_width\",\n            ),\n            pn.layout.HSpacer(height=0),\n            sizing_mode=\"stretch_width\",\n            css_classes=[\"app-container\"],\n            margin=(50, 25, 25, 25),\n        )\n\n        self.view[:] = [  # pylint: disable=unsupported-assignment-operation\n            pn.Column(\n                appbar,\n                settings_bar,\n                pn.Row(\n                    pn.Column(\n                        self.insert_plot_pane,\n                        css_classes=[\"app-container\"],\n                        margin=25,\n                        sizing_mode=\"stretch_both\",\n                    ),\n                    pn.Column(\n                        self.edge_plot_pane,\n                        css_classes=[\"app-container\"],\n                        margin=25,\n                        sizing_mode=\"stretch_both\",\n                    ),\n                    sizing_mode=\"stretch_both\",\n                    min_height=300,\n                ),\n                pn.Row(\n                    self.history_plot_pane,\n                    css_classes=[\"app-container\"],\n                    margin=25,\n                    min_height=300,\n                    sizing_mode=\"stretch_both\",\n                ),\n                css_classes=[\"app-body\"],\n                sizing_mode=\"stretch_both\",\n            ),\n            pn.layout.HSpacer(height=25),\n        ]\n\n    @pn.depends(\"tool\", \"variable\", \"color_map\")\n    def _get_insert_plot(self):\n        plot_data = _get_data_a().loc[self.tool]\n        data = [(plot_data[\"Xo\"], plot_data[\"Yo\"], plot_data[self.variable])]\n        return hv.Path(data, vdims=self.variable).opts(\n            cmap=self.color_map, color=self.variable, line_width=4, colorbar=True, responsive=True\n        )\n\n    @pn.depends(\"tool\", \"variable\", \"color_map\")\n    def _get_edge_plot(self):\n        plot_data = _get_data_a().loc[self.tool]\n        return plot_data.hvplot(\n            x=\"Number\", y=self.variable, kind=\"area\", alpha=0.6, color=self._color, responsive=True\n        )\n\n    @pn.depends(\"tool\", \"color_map\")\n    def _update_history_plot(self):\n        plot_data = _get_data_b().loc[self.tool]\n        return plot_data.hvplot(\n            x=\"Cut Distance\", y=\"Feed\", kind=\"line\", line_width=4, responsive=True\n        ).opts(color=self._color)\n\n    @property\n    def _color(self):\n        return process_cmap(self.color_map, 1)[0]\n\n\nif pn.state.served:\n    pn.extension(raw_css=[STYLE], design=\"bootstrap\")\n    Dashboard().view.servable()\n    \n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#gif",
    "href": "resources/classic_dashboard/classic_dashboard.html#gif",
    "title": "Classic Dashboard",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#mp4",
    "href": "resources/classic_dashboard/classic_dashboard.html#mp4",
    "title": "Classic Dashboard",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#png",
    "href": "resources/classic_dashboard/classic_dashboard.html#png",
    "title": "Classic Dashboard",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#social",
    "href": "resources/classic_dashboard/classic_dashboard.html#social",
    "title": "Classic Dashboard",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html",
    "href": "resources/bootstrap_dashboard/index.html",
    "title": "Bootstrap Dashboard",
    "section": "",
    "text": "This dashboard demonstrates that a dashboard layout similar to the Bootstrap dashboard template can be implemented in Panel."
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#introduction",
    "href": "resources/bootstrap_dashboard/index.html#introduction",
    "title": "Bootstrap Dashboard",
    "section": "",
    "text": "This dashboard demonstrates that a dashboard layout similar to the Bootstrap dashboard template can be implemented in Panel."
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#app",
    "href": "resources/bootstrap_dashboard/index.html#app",
    "title": "Bootstrap Dashboard",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#code",
    "href": "resources/bootstrap_dashboard/index.html#code",
    "title": "Bootstrap Dashboard",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"\nSee https://awesome-panel.org/resources/bootstrap_dashboard/\n\"\"\"\nimport hvplot.pandas  # pylint: disable=unused-import\nimport pandas as pd\nimport panel as pn\n\nBOOTSTRAP_DASHBOARD_CHART_URL=\"https://awesomepanel.blob.core.windows.net/resources/bootstrap_dashboard/bootstrap_dashboard_chart.csv\"\nBOOTSTRAP_DASHBOARD_TABLE_URL=\"https://awesomepanel.blob.core.windows.net/resources/bootstrap_dashboard/bootstrap_dashboard_table.csv\"\n\nCOLOR=\"#0072B5\"\n\n@pn.cache\ndef _get_chart_data():\n    return pd.read_csv(BOOTSTRAP_DASHBOARD_CHART_URL)\n\n@pn.cache\ndef _get_table_data():\n    return pd.read_csv(BOOTSTRAP_DASHBOARD_TABLE_URL)\n\ndef _holoviews_chart():\n    \"\"\"## Dashboard Orders Chart generated by HoloViews\"\"\"\n    data = _get_chart_data()\n    line_plot = data.hvplot.line(\n        x=\"Day\",\n        y=\"Orders\",\n        height=500,\n        line_color=COLOR,\n        line_width=6,\n    )\n    scatter_plot = data.hvplot.scatter(x=\"Day\", y=\"Orders\", height=300,).opts(\n        marker=\"o\",\n        size=10,\n        color=COLOR,\n    )\n    fig = line_plot * scatter_plot\n    gridstyle = {\n        \"grid_line_color\": \"black\",\n        \"grid_line_width\": 0.1,\n    }\n    fig = fig.opts(\n        responsive=True,\n        toolbar=None,\n        yticks=list(\n            range(\n                12000,\n                26000,\n                2000,\n            )\n        ),\n        ylim=(\n            12000,\n            26000,\n        ),\n        gridstyle=gridstyle,\n        show_grid=True,\n    )\n    return fig\n\napp = pn.extension(\"tabulator\", sizing_mode=\"stretch_width\")\n\npn.template.FastListTemplate(\n    site=\"Awesome Panel\", site_url=\"https://awesome-panel.org\", title=\"Bootstrap Dashboard\",\n    main=[\n        pn.Column(\n            pn.pane.Markdown(\"## Dashboard\"),\n            _holoviews_chart()),\n            pn.Column(pn.pane.Markdown(\"## Section Title\"),\n            pn.widgets.Tabulator(_get_table_data(), layout='fit_data_stretch')),\n    ], main_max_width=\"800px\", main_layout=None,\n).servable()\n\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#gif",
    "href": "resources/bootstrap_dashboard/index.html#gif",
    "title": "Bootstrap Dashboard",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#png",
    "href": "resources/bootstrap_dashboard/index.html#png",
    "title": "Bootstrap Dashboard",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#mp4",
    "href": "resources/bootstrap_dashboard/index.html#mp4",
    "title": "Bootstrap Dashboard",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/bootstrap_dashboard/index.html#social",
    "href": "resources/bootstrap_dashboard/index.html#social",
    "title": "Bootstrap Dashboard",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Awesome Panel",
    "section": "",
    "text": "We want to show how awesome Panel by HoloViz is and push the framework forward.\nPlease give awesome-panel a ⭐ on Github. Thanks.\nStar"
  },
  {
    "objectID": "about.html#pyodide-apps",
    "href": "about.html#pyodide-apps",
    "title": "Awesome Panel",
    "section": "Pyodide Apps",
    "text": "Pyodide Apps\nWe distribute most of our apps as apps that run entirely in the browser via Pyodide and panel convert. We do this because we don’t have the resources to pay for and maintain servers."
  },
  {
    "objectID": "resources/async_tasks/index.html",
    "href": "resources/async_tasks/index.html",
    "title": "Async Tasks",
    "section": "",
    "text": "When creating awesome analytics apps you sometimes want to run blocking tasks asynchronously in a background thread. Panel supports this as its running on top of the asynchronous web server Tornado.\nThe app below shows how to start a background thread that updates a progressbar while the rest of the application remains responsive. We utilize a ThreadPoolExecutor and async to achieve this."
  },
  {
    "objectID": "resources/async_tasks/index.html#introduction",
    "href": "resources/async_tasks/index.html#introduction",
    "title": "Async Tasks",
    "section": "",
    "text": "When creating awesome analytics apps you sometimes want to run blocking tasks asynchronously in a background thread. Panel supports this as its running on top of the asynchronous web server Tornado.\nThe app below shows how to start a background thread that updates a progressbar while the rest of the application remains responsive. We utilize a ThreadPoolExecutor and async to achieve this."
  },
  {
    "objectID": "resources/async_tasks/index.html#app",
    "href": "resources/async_tasks/index.html#app",
    "title": "Async Tasks",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/async_tasks/index.html#code",
    "href": "resources/async_tasks/index.html#code",
    "title": "Async Tasks",
    "section": "Code",
    "text": "Code\n\n\nShow\n\nimport time\nfrom concurrent.futures import ThreadPoolExecutor\nfrom contextlib import contextmanager\n\nimport numpy as np\nimport panel as pn\nimport param\nfrom asyncio import wrap_future\n\nclass ProgressExtMod(pn.viewable.Viewer):\n    \"\"\"A custom component for easy progress reporting\"\"\"\n\n    completed = param.Integer(default=0)\n    bar_color = param.String(default=\"info\")\n    num_tasks = param.Integer(default=100, bounds=(1, None))\n\n    # @param.depends('completed', 'num_tasks')\n    @property\n    def value(self) -&gt; int:\n        \"\"\"Returns the progress value\n\n        Returns:\n            int: The progress value\n        \"\"\"\n        return int(100 * (self.completed / self.num_tasks))\n\n    def reset(self):\n        \"\"\"Resets the value and message\"\"\"\n        # Please note the order matters as the Widgets updates two times. One for each change\n        self.completed = 0\n\n    def __panel__(self):\n        return self.view\n\n    @param.depends(\"completed\", \"bar_color\")\n    def view(self):\n        \"\"\"View the widget\n        Returns:\n            pn.viewable.Viewable: Add this to your app to see the progress reported\n        \"\"\"\n        if self.value:\n            return pn.widgets.Progress(\n                active=True, value=self.value, align=\"center\", sizing_mode=\"stretch_width\"\n            )\n        return None\n\n    @contextmanager\n    def increment(self):\n        \"\"\"Increments the value\n        \n        Can be used as context manager or decorator\n        \n        Yields:\n            None: Nothing is yielded\n        \"\"\"\n        self.completed += 1\n        yield\n        if self.completed == self.num_tasks:\n            self.reset()\n\nexecutor = ThreadPoolExecutor(max_workers=2)  # pylint: disable=consider-using-with\nprogress = ProgressExtMod()\n\n\nclass AsyncComponent(pn.viewable.Viewer):\n    \"\"\"A component that demonstrates how to run a Blocking Background task asynchronously\n    in Panel\"\"\"\n\n    select = param.Selector(objects=range(10))\n    slider = param.Number(2, bounds=(0, 10))\n    \n    run_blocking_task = param.Event(label=\"RUN\")\n    result = param.Number(0)\n    view = param.Parameter()\n\n    def __init__(self, **params):\n        super().__init__(**params)\n\n        self._layout = pn.Column(\n            pn.pane.Markdown(\"## Blocking Task Running in Background\"),\n            pn.Param(\n                self,\n                parameters=[\"run_blocking_task\", \"result\"],\n                widgets={\"result\": {\"disabled\": True}, \"run_blocking_task\": {\"button_type\": \"primary\"}},\n                show_name=False,\n            ),\n            progress,\n            pn.pane.Markdown(\"## Other, Non-Blocked Tasks\"),\n            pn.Param(\n                self,\n                parameters=[\"select\", \"slider\"],\n                widgets={\"text\": {\"disabled\": True}},\n                show_name=False,\n            ),\n            self.text\n        )\n\n    def __panel__(self):\n        return self._layout\n\n    @param.depends(\"slider\", \"select\")\n    def text(self):\n        if self.select:\n            select = self.select\n        else:\n            select = 0\n        return f\"{select} + {self.slider} = {select + self.slider}\"\n\n    @pn.depends(\"run_blocking_task\", watch=True)\n    async def _run_blocking_tasks(self, num_tasks=10):\n        \"\"\"Runs background tasks num_tasks times\"\"\"\n        num_tasks = 20\n        progress.num_tasks = num_tasks\n        for _ in range(num_tasks):\n            future = executor.submit(self._run_blocking_task)\n            result = await wrap_future(future)\n            self._update(result)\n\n    @progress.increment()\n    def _update(self, number):\n        self.result += number\n\n    @staticmethod\n    def _run_blocking_task():\n        time.sleep(np.random.randint(1, 2))\n        return 5\n\nif pn.state.served:\n    pn.extension()\n    \n    component = AsyncComponent()\n    pn.template.FastListTemplate(\n        site=\"Awesome Panel\", site_url=\"https://awesome-panel.org\", title=\"Async Tasks\", main=[component], main_layout=None, main_max_width=\"400px\"\n    ).servable()"
  },
  {
    "objectID": "resources/async_tasks/index.html#gif",
    "href": "resources/async_tasks/index.html#gif",
    "title": "Async Tasks",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/async_tasks/index.html#png",
    "href": "resources/async_tasks/index.html#png",
    "title": "Async Tasks",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/async_tasks/index.html#mp4",
    "href": "resources/async_tasks/index.html#mp4",
    "title": "Async Tasks",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/async_tasks/index.html#social",
    "href": "resources/async_tasks/index.html#social",
    "title": "Async Tasks",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/caching_example/index.html",
    "href": "resources/caching_example/index.html",
    "title": "Caching Example",
    "section": "",
    "text": "In computing, a cache is a high-speed data storage layer which stores a subset of data, typically transient in nature, so that future requests for that data are served up faster than is possible by accessing the data’s primary storage location.\nCaching allows you to efficiently reuse previously retrieved or computed data to speed up your exploration, jobs or apps.\nGood caching solutions for Panel are summarized in the table below\n\n\n\nTechnology\nPerformance\nPersistant\nHorizontal Scaling\nVertical Scaling\nExpiration\nPreloading\nComments\n\n\n\n\npanel.cache\nVery Fast\nOptional\nOptional\nYes\nYes\nYes\nConfigurable\n\n\npanel.state.as_cached\nVery Fast\nOptional\nOptional\nYes\nYes\nYes\nConfigurable\n\n\npanel.state.cache\nVery Fast\nNo\nNo\nYes\nNo\nYes\nSimple Dict Cache\n\n\nDiskCache\nVery Fast\nYes\nNo\nYes\nYes\nYes\nSimple Persistent Cache\n\n\nRedis\nVery Fast\nYes\nYes\nYes\nYes\nYes\nServer solution. Works well with the distributed task queue Celery\n\n\n\nNote that\n\nExpiration enables caching data for a period of time for example seconds, minutes, hours or days.\nPreloading of a cache can be triggered by a cronjob or event.\nIf the cache is persisted, i.e. stored to disk or runs on a server like Redis it can enable caching data across jobs, applications, servers and restarts.\n\nTo learn more about caching check out the AWS Caching Overview"
  },
  {
    "objectID": "resources/caching_example/index.html#introduction",
    "href": "resources/caching_example/index.html#introduction",
    "title": "Caching Example",
    "section": "",
    "text": "In computing, a cache is a high-speed data storage layer which stores a subset of data, typically transient in nature, so that future requests for that data are served up faster than is possible by accessing the data’s primary storage location.\nCaching allows you to efficiently reuse previously retrieved or computed data to speed up your exploration, jobs or apps.\nGood caching solutions for Panel are summarized in the table below\n\n\n\nTechnology\nPerformance\nPersistant\nHorizontal Scaling\nVertical Scaling\nExpiration\nPreloading\nComments\n\n\n\n\npanel.cache\nVery Fast\nOptional\nOptional\nYes\nYes\nYes\nConfigurable\n\n\npanel.state.as_cached\nVery Fast\nOptional\nOptional\nYes\nYes\nYes\nConfigurable\n\n\npanel.state.cache\nVery Fast\nNo\nNo\nYes\nNo\nYes\nSimple Dict Cache\n\n\nDiskCache\nVery Fast\nYes\nNo\nYes\nYes\nYes\nSimple Persistent Cache\n\n\nRedis\nVery Fast\nYes\nYes\nYes\nYes\nYes\nServer solution. Works well with the distributed task queue Celery\n\n\n\nNote that\n\nExpiration enables caching data for a period of time for example seconds, minutes, hours or days.\nPreloading of a cache can be triggered by a cronjob or event.\nIf the cache is persisted, i.e. stored to disk or runs on a server like Redis it can enable caching data across jobs, applications, servers and restarts.\n\nTo learn more about caching check out the AWS Caching Overview"
  },
  {
    "objectID": "resources/caching_example/index.html#app",
    "href": "resources/caching_example/index.html#app",
    "title": "Caching Example",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/caching_example/index.html#code",
    "href": "resources/caching_example/index.html#code",
    "title": "Caching Example",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"\n# Caching Example\n\nSee https://awesome-panel.org/resources/caching_example\n\"\"\"\nimport time\n\nimport hvplot.pandas  # pylint: disable=unused-import\nimport numpy as np\nimport pandas as pd\nimport panel as pn\n\npn.extension(design=\"material\")\n\nACCENT_COLOR = \"#1f77b4\"\n\nnp.random.seed([3, 1415])\nPERIODS = 1 * 24 * 60  # minutes. I.e. 1 days\nDATA = pd.DataFrame(\n    {\n        \"time\": pd.date_range(\"2020-01-01\", periods=PERIODS, freq=\"T\"),\n        \"price\": np.random.randn(PERIODS) + 98,\n    }\n)\n\ndef _load_data(frac=0.1):\n    time.sleep(0.5 + frac * 0.5)\n    return DATA.sample(frac=frac)\n\ndef _plot_data(frac=0.1):\n    time.sleep(0.5)\n    data = _load_data(frac)\n    return data.hvplot(x=\"time\", y=\"price\")\n\n@pn.cache(per_session=True, ttl=60*60*24)\ndef _plot_data_cached(frac):\n    return _plot_data(frac)\n\n\n# Create Widgets\nfraction = pn.widgets.FloatSlider(value=0.1, start=0.1, end=1.0, step=0.1, name=\"Fraction of data\")\nduration = pn.widgets.StaticText(value=\"\", name=\"Time to create plot\")\nuse_cache = pn.widgets.Checkbox(value=False, name=\"Use Cache\")\npreload_cache = pn.widgets.Button(name=\"Preload Cache\", button_type=\"primary\", disabled=True)\nclear_cache = pn.widgets.Button(name=\"Clear Cache\", disabled=True)\npreload_progress = pn.widgets.Progress(\n    name=\"Progress\", active=False, value=0, max=100, sizing_mode=\"stretch_width\", disabled=True\n)\n\nplot_panel = pn.pane.HoloViews(min_height=500, sizing_mode=\"stretch_both\")\n\n# Setup interactivity\ndef _clear_cache(*_):\n    _plot_data_cached.clear()\n\n\nclear_cache.on_click(_clear_cache)\n\n\ndef _preload_cache(*_):\n    for index in range(0, 11, 1):\n        frac_ = round(index / 10, 1)\n        preload_progress.value = int(frac_ * 100)\n        _plot_data_cached(frac_)\n    preload_progress.value = 0\n\n\npreload_cache.on_click(_preload_cache)\n\n\n@pn.depends(frac=fraction, watch=True)\ndef _update_plot(frac):\n    start_counter = time.perf_counter()\n\n    frac = round(frac, 1)\n    if use_cache.value:\n        plot = _plot_data_cached(frac)\n    else:\n        plot = _plot_data(frac)\n\n    end_counter = time.perf_counter()\n    duration.value = str(round(end_counter - start_counter, 4)) + \" seconds\"\n\n    # Please note DiskCache does not cache the options\n    plot.opts(color=ACCENT_COLOR, responsive=True)\n    plot_panel.object = plot\n\n\n@pn.depends(use_cache=use_cache, watch=True)\ndef _update_cache_widgets(use_cache):  # pylint: disable=redefined-outer-name\n    disabled = not use_cache\n    preload_cache.disabled = disabled\n    clear_cache.disabled = disabled\n    preload_progress.disabled = disabled\n\n\n# Layout the app\npn.Column(\n    pn.pane.Markdown(\n        \"# Speed up slow functions with caching\", sizing_mode=\"stretch_width\"\n    ),\n    fraction,\n    duration,\n    use_cache,\n    plot_panel,\n    pn.Row(preload_cache, clear_cache,),\n    preload_progress,\n).servable()\n\npn.state.onload(lambda: fraction.param.trigger(\"value\"))\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/caching_example/index.html#gif",
    "href": "resources/caching_example/index.html#gif",
    "title": "Caching Example",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/caching_example/index.html#png",
    "href": "resources/caching_example/index.html#png",
    "title": "Caching Example",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/caching_example/index.html#mp4",
    "href": "resources/caching_example/index.html#mp4",
    "title": "Caching Example",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/caching_example/index.html#social",
    "href": "resources/caching_example/index.html#social",
    "title": "Caching Example",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html",
    "href": "resources/commuting_flows_italy/index.html",
    "title": "Commuting Flows Italy",
    "section": "",
    "text": "A dashboard by Ivan D’Ortenzio showing incoming and outgoing commuting flows between Italian regions."
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#introduction",
    "href": "resources/commuting_flows_italy/index.html#introduction",
    "title": "Commuting Flows Italy",
    "section": "",
    "text": "A dashboard by Ivan D’Ortenzio showing incoming and outgoing commuting flows between Italian regions."
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#app",
    "href": "resources/commuting_flows_italy/index.html#app",
    "title": "Commuting Flows Italy",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces | Open in PyScript.com"
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#code",
    "href": "resources/commuting_flows_italy/index.html#code",
    "title": "Commuting Flows Italy",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"\nSource: https://awesome-panel.org/resources/commuting_flows_italian_regions/\n\"\"\"\nimport holoviews as hv\nimport numpy as np\nimport pandas as pd\nimport panel as pn\nfrom bokeh.models import HoverTool\nfrom shapely.geometry import LineString\n\n# Load the bokeh extension\nhv.extension(\"bokeh\")\n\n# Set the sizing mode\npn.extension(sizing_mode=\"stretch_width\")\n\n# Dashboard title\nDASH_TITLE = \"Commuting flows between Italian Regions\"\n\n# Default colors for the dashboard\nACCENT = \"#2f4f4f\"\nINCOMING_COLOR = \"rgba(0, 108, 151, 0.75)\"\nOUTGOING_COLOR = \"rgba(199, 81, 51, 0.75)\"\nINTERNAL_COLOR = \"rgba(47, 79, 79, 0.55)\"\n\n# Default colors for indicators\nDEFAULT_COLOR = \"white\"\nTITLE_SIZE = \"18pt\"\nFONT_SIZE = \"20pt\"\n\n# Min/Max node size\nMIN_PT_SIZE = 7\nMAX_PT_SIZE = 10\n\n# Min/Max curve width\nMIN_LW = 1\nMAX_LW = 10\n\n# Dataframes dtypes\nITA_REGIONS_DTYPES = {\n    \"cod_reg\": \"uint8\",\n    \"den_reg\": \"object\",\n    \"x\": \"object\",\n    \"y\": \"object\",\n}\n\nNODES_DTYPES = {\n    \"cod_reg\": \"uint8\",\n    \"x\": \"float64\",\n    \"y\": \"float64\",\n}\n\nEDGES_DTYPES = {\n    \"motivo\": \"object\",\n    \"interno\": \"bool\",\n    \"flussi\": \"uint32\",\n    \"reg_o\": \"uint8\",\n    \"reg_d\": \"uint8\",\n    \"x_o\": \"float64\",\n    \"y_o\": \"float64\",\n    \"x_d\": \"float64\",\n    \"y_d\": \"float64\",\n}\n\n# Dictionary that maps region code to its name\nITA_REGIONS = {\n    1: \"Piemonte\",\n    2: \"Valle d'Aosta/Vallée d'Aoste\",\n    3: \"Lombardia\",\n    4: \"Trentino-Alto Adige/Südtirol\",\n    5: \"Veneto\",\n    6: \"Friuli-Venezia Giulia\",\n    7: \"Liguria\",\n    8: \"Emilia-Romagna\",\n    9: \"Toscana\",\n    10: \"Umbria\",\n    11: \"Marche\",\n    12: \"Lazio\",\n    13: \"Abruzzo\",\n    14: \"Molise\",\n    15: \"Campania\",\n    16: \"Puglia\",\n    17: \"Basilicata\",\n    18: \"Calabria\",\n    19: \"Sicilia\",\n    20: \"Sardegna\",\n}\n\n# Dictionary of options (Label/option) for commuting purpose\nCOMMUTING_PURPOSE = {\n    \"Work\": \"Lavoro\",\n    \"Study\": \"Studio\",\n    \"Total\": \"Totale\",\n}\n\n# Dashboard description\nDASH_DESCR = f\"\"\"\n&lt;div&gt;\n  &lt;hr /&gt;\n  &lt;p&gt;A Panel dashboard showing &lt;b style=\"color:{INCOMING_COLOR};\"&gt;incoming&lt;/b&gt;\n    and &lt;b style=\"color:{OUTGOING_COLOR};\"&gt;outgoing&lt;/b&gt; commuting flows\n    for work and study between Italian Regions.&lt;/p&gt;\n  &lt;p&gt;The width of the curves reflects the magnitude of the flows.&lt;/p&gt;\n  &lt;p&gt;\n    &lt;a href=\"https://www.istat.it/it/archivio/139381\" target=\"_blank\"&gt;Commuting data&lt;/a&gt; from the\n    15th Population and Housing Census (Istat, 2011).\n  &lt;/p&gt;\n  &lt;p&gt;\n    &lt;a href=\"https://www.istat.it/it/archivio/222527\" target=\"_blank\"&gt;Administrative boundaries&lt;/a&gt; from\n    ISTAT.\n  &lt;/p&gt;\n  &lt;hr /&gt;\n&lt;/div&gt;\n\"\"\"\n\nCSS_FIX = \"\"\"\n:host(.outline) .bk-btn.bk-btn-primary.bk-active, :host(.outline) .bk-btn.bk-btn-primary:active {\n    color: var(--foreground-on-accent-rest) !important;\n}\n\"\"\"\n\nif not CSS_FIX in pn.config.raw_css:\n    pn.config.raw_css.append(CSS_FIX)\n\n\ndef get_incoming_numind(edges, region_code, comm_purpose):\n    \"\"\"\n    Returns the total incoming commuters to the selected Region.\n    \"\"\"\n\n    # Get the value of incoming commuters\n    if comm_purpose == \"Totale\":\n        query = f\"reg_d == {region_code} & interno == 0\"\n    else:\n        query = f\"(reg_d == {region_code} & motivo == '{comm_purpose}' & interno == 0)\"\n\n    flows = edges.query(query)[\"flussi\"].sum()\n\n    return pn.indicators.Number(\n        name=\"Incoming\",\n        value=flows,\n        default_color=DEFAULT_COLOR,\n        styles={\"background\": INCOMING_COLOR, \"padding\": \"5px 10px 5px 10px\", \"border-radius\": \"5px\"},\n        title_size=TITLE_SIZE,\n        font_size=FONT_SIZE,\n        sizing_mode=\"stretch_width\",\n        align=\"center\",\n        css_classes=[\"center_number\"],\n    )\n\n\ndef get_outgoing_numind(edges, region_code, comm_purpose):\n    \"\"\"\n    Returns the outgoing commuters from\n    the selected Region.\n    \"\"\"\n\n    # Get the value of outgoing commuters\n    if comm_purpose == \"Totale\":\n        query = f\"reg_o == {region_code} & interno == 0\"\n    else:\n        query = f\"(reg_o == {region_code} & motivo == '{comm_purpose}' & interno == 0)\"\n\n    flows = edges.query(query)[\"flussi\"].sum()\n\n    return pn.indicators.Number(\n        name=\"Outgoing\",\n        value=flows,\n        default_color=DEFAULT_COLOR,\n        styles={\"background\": OUTGOING_COLOR, \"padding\": \"5px 10px 5px 10px\", \"border-radius\": \"5px\"},\n        title_size=TITLE_SIZE,\n        font_size=FONT_SIZE,\n        sizing_mode=\"stretch_width\",\n        align=\"center\",\n        css_classes=[\"center_number\"],\n    )\n\n\ndef get_internal_numind(edges, region_code, comm_purpose):\n    \"\"\"\n    Returns the number of internal commuters of\n    the selected Region.\n    \"\"\"\n\n    # Get the value of internal commuters\n    if comm_purpose == \"Totale\":\n        query = f\"reg_o == {region_code} & interno == 1\"\n    else:\n        query = f\"(reg_o == {region_code} & motivo == '{comm_purpose}' & interno == 1)\"\n\n    flows = edges.query(query)[\"flussi\"].sum()\n\n    return pn.indicators.Number(\n        name=\"Internal mobility\",\n        value=flows,\n        default_color=DEFAULT_COLOR,\n        styles={\"background\": INTERNAL_COLOR, \"padding\": \"5px 10px 5px 10px\", \"border-radius\": \"5px\"},\n        title_size=TITLE_SIZE,\n        font_size=FONT_SIZE,\n        sizing_mode=\"stretch_width\",\n        align=\"center\",\n        css_classes=[\"center_number\"],\n    )\n\n\ndef filter_edges(edges, region_code, comm_purpose):\n    \"\"\"\n    This function filters the rows of the edges for\n    the selected Region and commuting purpose.\n    \"\"\"\n\n    if comm_purpose == \"Totale\":\n        query = f\"(reg_o == {region_code} & interno == 0) |\"\n        query += f\" (reg_d == {region_code} & interno == 0)\"\n    else:\n        query = f\"(reg_o == {region_code} & motivo == '{comm_purpose}' & interno == 0) |\"\n        query += f\" (reg_d == {region_code} & motivo == '{comm_purpose}' & interno == 0)\"\n    return edges.query(query)\n\n\ndef get_nodes(nodes, edges, region_code, comm_purpose):\n    \"\"\"\n    Get the graph's nodes for the selected Region and commuting purpose\n    \"\"\"\n\n    # Filter the edges by Region and commuting purpose\n    filt_edges = filter_edges(edges, region_code, comm_purpose)\n\n    # Find the unique values of region codes\n    region_codes = np.unique(filt_edges[[\"reg_o\", \"reg_d\"]].values)\n\n    # Filter the nodes\n    nodes = nodes[nodes[\"cod_reg\"].isin(region_codes)]\n\n    # Reoder the columns for hv.Graph\n    nodes = nodes[[\"x\", \"y\", \"cod_reg\"]]\n\n    # Assign the node size\n    nodes[\"size\"] = np.where(\n        nodes[\"cod_reg\"] == region_code, MAX_PT_SIZE, MIN_PT_SIZE\n    )\n\n    # Assigns a marker to the nodes\n    nodes[\"marker\"] = np.where(\n        nodes[\"cod_reg\"] == region_code, \"square\", \"circle\"\n    )\n\n    return nodes\n\n\ndef get_bezier_curve(x_o, y_o, x_d, y_d, steps=25):\n    \"\"\"\n    Draw a Bézier curve defined by a start point, endpoint and a control points\n    Source: https://stackoverflow.com/questions/69804595/trying-to-make-a-bezier-curve-on-pygame-library\n    \"\"\"\n\n    # Generate the O/D linestring\n    od_line = LineString([(x_o, y_o), (x_d, y_d)])\n\n    # Calculate the offset distance of the control point\n    offset_distance = od_line.length / 2\n\n    # Create a line parallel to the original at the offset distance\n    offset_pline = od_line.parallel_offset(offset_distance, \"left\")\n\n    # Get the XY coodinates of the control point\n    ctrl_x = offset_pline.centroid.x\n    ctrl_y = offset_pline.centroid.y\n\n    # Calculate the XY coordinates of the Bézier curve\n    t = np.array([i * 1 / steps for i in range(0, steps + 1)])\n    x_coords = x_o * (1 - t) ** 2 + 2 * (1 - t) * t * ctrl_x + x_d * t**2\n    y_coords = y_o * (1 - t) ** 2 + 2 * (1 - t) * t * ctrl_y + y_d * t**2\n\n    return (x_coords, y_coords)\n\n\ndef get_edge_width(flow, min_flow, max_flow):\n    \"\"\"\n    This function calculates the width of the curves\n    according to the magnitude of the flow.\n    \"\"\"\n\n    return MIN_LW + np.power(flow - min_flow, 0.57) * (\n        MAX_LW - MIN_LW\n    ) / np.power(max_flow - min_flow, 0.57)\n\n\ndef get_edges(nodes, edges, region_code, comm_purpose):\n    \"\"\"\n    Get the graph's edges for the selected Region and commuting purpose\n    \"\"\"\n\n    # Filter the edges by Region and commuting purpose\n    filt_edges = filter_edges(edges, region_code, comm_purpose).copy()\n\n    # Aggregate the flows by Region of origin and destination\n    if comm_purpose == \"Totale\":\n        filt_edges = (\n            filt_edges.groupby([\"reg_o\", \"reg_d\"])\n            .agg(\n                motivo=(\"motivo\", \"first\"),\n                interno=(\"interno\", \"first\"),\n                flussi=(\"flussi\", \"sum\"),\n            )\n            .reset_index()\n        )\n\n    # Assign Region names\n    filt_edges.loc[:,\"den_reg_o\"] = filt_edges[\"reg_o\"].map(ITA_REGIONS)\n    filt_edges.loc[:,\"den_reg_d\"] = filt_edges[\"reg_d\"].map(ITA_REGIONS)\n\n    # Add xy coordinates of origin\n    filt_edges = filt_edges.merge(\n        nodes.add_suffix(\"_o\"), left_on=\"reg_o\", right_on=\"cod_reg_o\"\n    )\n\n    # Add xy coordinates of destination\n    filt_edges = filt_edges.merge(\n        nodes.add_suffix(\"_d\"), left_on=\"reg_d\", right_on=\"cod_reg_d\"\n    )\n\n    # Get the Bézier curve\n    filt_edges[\"curve\"] = filt_edges.apply(\n        lambda row: get_bezier_curve(\n            row[\"x_o\"], row[\"y_o\"], row[\"x_d\"], row[\"y_d\"]\n        ),\n        axis=1,\n    )\n\n    # Get the minimum/maximum flow\n    min_flow = filt_edges[\"flussi\"].min()\n    max_flow = filt_edges[\"flussi\"].max()\n\n    # Calculate the curve width\n    filt_edges[\"width\"] = filt_edges.apply(\n        lambda row: get_edge_width(\n            row[\"flussi\"],\n            min_flow,\n            max_flow,\n        ),\n        axis=1,\n    )\n\n    # Assigns the color to the incoming/outgoing edges\n    filt_edges[\"color\"] = np.where(\n        filt_edges[\"reg_d\"] == region_code, INCOMING_COLOR, OUTGOING_COLOR\n    )\n\n    filt_edges = filt_edges.sort_values(by=\"flussi\")\n\n    return filt_edges\n\n\ndef get_flow_map(nodes, edges, region_admin_bounds, region_code, comm_purpose):\n    \"\"\"\n    Returns a Graph showing incoming and outgoing commuting flows\n    for the selected Region and commuting purpose.\n    \"\"\"\n\n    def hook(plot, element):\n        \"\"\"\n        Custom hook for disabling x/y tick lines/labels\n        \"\"\"\n        plot.state.xaxis.major_tick_line_color = None\n        plot.state.xaxis.minor_tick_line_color = None\n        plot.state.xaxis.major_label_text_font_size = \"0pt\"\n        plot.state.yaxis.major_tick_line_color = None\n        plot.state.yaxis.minor_tick_line_color = None\n        plot.state.yaxis.major_label_text_font_size = \"0pt\"\n\n    # Define a custom Hover tool\n    flow_map_hover = HoverTool(\n        tooltips=[\n            (\"Origin\", \"@den_reg_o\"),\n            (\"Destination\", \"@den_reg_d\"),\n            (\"Commuters\", \"@flussi\"),\n        ]\n    )\n\n    # Get the Nodes of the selected Region and commuting purpose\n    region_graph_nodes = get_nodes(nodes, edges, region_code, comm_purpose)\n\n    # Get the Edges of the selected Region and commuting purpose\n    region_graph_edges = get_edges(nodes, edges, region_code, comm_purpose)\n\n    # Get the list of Bézier curves\n    curves = region_graph_edges[\"curve\"].to_list()\n\n    # Get the administrative boundary of the selected Region\n    region_admin_bound = region_admin_bounds[\n        (region_admin_bounds[\"cod_reg\"] == region_code)\n    ].to_dict(\"records\")\n\n    # Draw the administrative boundary using hv.Path\n    region_admin_bound_path = hv.Path(region_admin_bound)\n    region_admin_bound_path.opts(color=ACCENT, line_width=1.0)\n\n    # Build a Graph from Edges, Nodes and Bézier curves\n    region_flow_graph = hv.Graph(\n        (region_graph_edges.drop(\"curve\", axis=1), region_graph_nodes, curves)\n    )\n\n    # Additional plot options\n    region_flow_graph.opts(\n        title=\"Incoming and outgoing commuting flows\",\n        xlabel=\"\",\n        ylabel=\"\",\n        node_color=\"white\",\n        node_hover_fill_color=\"magenta\",\n        node_line_color=ACCENT,\n        node_size=\"size\",\n        node_marker=\"marker\",\n        edge_color=\"color\",\n        edge_hover_line_color=\"magenta\",\n        edge_line_width=\"width\",\n        inspection_policy=\"edges\",\n        tools=[flow_map_hover],\n        hooks=[hook],\n        frame_height=500,\n    )\n\n    # Compose the flow map\n    flow_map = (\n        hv.element.tiles.CartoLight()\n        * region_admin_bound_path\n        * region_flow_graph\n    )\n\n    return flow_map\n\n\n# Load the edges as a Dataframe\n@pn.cache\ndef get_edges_df():\n    return pd.read_json(\n        \"https://raw.githubusercontent.com/ivandorte/panel-commuting-istat/main/data/edges.json\",\n        orient=\"split\",\n        dtype=EDGES_DTYPES,\n    )\nedges_df = get_edges_df()\n\n# Load the nodes as a Dataframe\n@pn.cache\ndef get_nodes_df():\n    return pd.read_json(\n        \"https://raw.githubusercontent.com/ivandorte/panel-commuting-istat/main/data/nodes.json\",\n        orient=\"split\",\n        dtype=NODES_DTYPES,\n    )\n\nnodes_df = get_nodes_df()\n\n# Load the italian regions as a Dataframe\n@pn.cache\ndef get_region_admin_bounds_df():\n    return pd.read_json(\n        \"https://raw.githubusercontent.com/ivandorte/panel-commuting-istat/main/data/italian_regions.json\",\n        orient=\"split\",\n        dtype=ITA_REGIONS_DTYPES,\n    )\nregion_admin_bounds_df = get_region_admin_bounds_df()\n\n# Region selector\nregion_options = dict(map(reversed, ITA_REGIONS.items()))\nregion_options = dict(sorted(region_options.items()))\n\nregion_select = pn.widgets.Select(\n    name=\"Region:\",\n    options=region_options,\n    sizing_mode=\"stretch_width\",\n)\n\n# Toggle buttons to select the commuting purpose\npurpose_select = pn.widgets.ToggleGroup(\n    name=\"\",\n    options=COMMUTING_PURPOSE,\n    behavior=\"radio\",\n    sizing_mode=\"stretch_width\",\n    button_type=\"primary\", button_style=\"outline\"\n)\n\n# Description pane\ndescr_pane = pn.pane.HTML(DASH_DESCR, styles={\"text-align\": \"left\"})\n\n# Numeric indicator for incoming flows\nincoming_numind_bind = pn.bind(\n    get_incoming_numind,\n    edges=edges_df,\n    region_code=region_select,\n    comm_purpose=purpose_select,\n)\n\n# Numeric indicator for outgoing flows\noutgoing_numind_bind = pn.bind(\n    get_outgoing_numind,\n    edges=edges_df,\n    region_code=region_select,\n    comm_purpose=purpose_select,\n)\n\n# Numeric indicator for internal flows\ninternal_numind_bind = pn.bind(\n    get_internal_numind,\n    edges=edges_df,\n    region_code=region_select,\n    comm_purpose=purpose_select,\n)\n\n# Flow map\nflowmap_bind = pn.bind(\n    get_flow_map,\n    nodes=nodes_df,\n    edges=edges_df,\n    region_admin_bounds=region_admin_bounds_df,\n    region_code=region_select,\n    comm_purpose=purpose_select,\n)\n\n# Compose the layout\nlayout = pn.Row(\n    pn.Column(\n        region_select,\n        purpose_select,\n        pn.Row(incoming_numind_bind, outgoing_numind_bind),\n        internal_numind_bind,\n        descr_pane,\n        width=350,\n    ),\n    flowmap_bind,\n)\n\npn.template.FastListTemplate(\n    site=\"\",\n    logo=\"https://raw.githubusercontent.com/ivandorte/panel-commuting-istat/main/icons/home_work.svg\",\n    title=DASH_TITLE,\n    theme=\"default\",\n    theme_toggle=False,\n    accent=ACCENT,\n    neutral_color=\"white\",\n    main=[layout],\n    main_max_width=\"1000px\",\n).servable()\n\nDownload (right-click, save-as)\nThe code of the app is an updated version of the original."
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#gif",
    "href": "resources/commuting_flows_italy/index.html#gif",
    "title": "Commuting Flows Italy",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#github",
    "href": "resources/commuting_flows_italy/index.html#github",
    "title": "Commuting Flows Italy",
    "section": "Github",
    "text": "Github\nThe original repository by Ivan D’Ortenzio\nivandorte/panel-commuting-istat"
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#mp4",
    "href": "resources/commuting_flows_italy/index.html#mp4",
    "title": "Commuting Flows Italy",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#png",
    "href": "resources/commuting_flows_italy/index.html#png",
    "title": "Commuting Flows Italy",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#social",
    "href": "resources/commuting_flows_italy/index.html#social",
    "title": "Commuting Flows Italy",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html",
    "href": "resources/hurdat_tracks_viewer/index.html",
    "title": "Hurdat Tracks Viewer",
    "section": "",
    "text": "The Hurdat Tracks Viewer medium post by Andrew Huang show you how to to turn a script, that outputs an image of a hurricane track, into a shareable app, and the best practices to improve the UX.\nThe script is from the Tropycal Python package."
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#introduction",
    "href": "resources/hurdat_tracks_viewer/index.html#introduction",
    "title": "Hurdat Tracks Viewer",
    "section": "",
    "text": "The Hurdat Tracks Viewer medium post by Andrew Huang show you how to to turn a script, that outputs an image of a hurricane track, into a shareable app, and the best practices to improve the UX.\nThe script is from the Tropycal Python package."
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#app",
    "href": "resources/hurdat_tracks_viewer/index.html#app",
    "title": "Hurdat Tracks Viewer",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#gif",
    "href": "resources/hurdat_tracks_viewer/index.html#gif",
    "title": "Hurdat Tracks Viewer",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#mp4",
    "href": "resources/hurdat_tracks_viewer/index.html#mp4",
    "title": "Hurdat Tracks Viewer",
    "section": "MP4",
    "text": "MP4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#png",
    "href": "resources/hurdat_tracks_viewer/index.html#png",
    "title": "Hurdat Tracks Viewer",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#social",
    "href": "resources/hurdat_tracks_viewer/index.html#social",
    "title": "Hurdat Tracks Viewer",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html",
    "href": "resources/mapwidget_dashboard/index.html",
    "title": "MapWidget Cesium",
    "section": "",
    "text": "The mapwidget package by Qiusheng Wu provides a set of custom map widgets for creating interactive maps in a Jupyter environment using different JavaScript mapping libraries, such as Cesium, Mapbox, MapLibre, Leaflet, and OpenLayers.\nHere we show that mapwidget.cesium also works with Panel."
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#introduction",
    "href": "resources/mapwidget_dashboard/index.html#introduction",
    "title": "MapWidget Cesium",
    "section": "",
    "text": "The mapwidget package by Qiusheng Wu provides a set of custom map widgets for creating interactive maps in a Jupyter environment using different JavaScript mapping libraries, such as Cesium, Mapbox, MapLibre, Leaflet, and OpenLayers.\nHere we show that mapwidget.cesium also works with Panel."
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#app",
    "href": "resources/mapwidget_dashboard/index.html#app",
    "title": "MapWidget Cesium",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#code",
    "href": "resources/mapwidget_dashboard/index.html#code",
    "title": "MapWidget Cesium",
    "section": "Code",
    "text": "Code\n\n\nShow\n\nimport os\n\nimport mapwidget.cesium as mapwidget\n\nimport panel as pn\n\npn.extension(\"ipywidgets\")\n\ntry:\n    token = os.environ[\"CESIUM_TOKEN\"]\nexcept KeyError as ex:\n    raise EnvironmentError(\n        \"CESIUM_TOKEN environment variable not set. \"\n        \"Sign up for free and get a free Cesium token here https://ion.cesium.com/signup/\"\n    ) from ex\n\ncesium_map = mapwidget.Map(\n    center=[40.70605, -74.01177], height=\"650px\", altitude=600, token=token\n)\n\ncomponent = pn.panel(cesium_map, sizing_mode=\"stretch_width\")\n\ndescription = \"\"\"# MapWidget\nCustom Jupyter widgets for creating interactive 2D/3D maps using popular JavaScript libraries with bidirectional communication, such as `Cesium`, `Mapbox`, `MapLibre`, `Leaflet`, and `OpenLayers`.\nBy **Qiusheng Wu**\n&lt;img src=\"https://avatars.githubusercontent.com/u/5016453?v=4\" style=\"width:100%;\"&gt; \n# Cesium\nCesium is the open platform for software applications designed to unleash the power of 3D data.\n&lt;img src=\"https://images.prismic.io/cesium/a4dc3936-e083-4337-ba48-bb5bba78b2a1_ion_color_white.png\" style=\"width:100%;\"&gt; \n\"\"\"\n\npn.template.FastListTemplate(\n    site=\"Awesome Panel\",\n    site_url=\"https://awesome-panel.org\",\n    logo=\"https://panel.holoviz.org/_static/logo_horizontal_dark_theme.png\",\n    title=\"mapwidget.cesium\",\n    main=[component],\n    sidebar=[description],\n).servable()\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#gif",
    "href": "resources/mapwidget_dashboard/index.html#gif",
    "title": "MapWidget Cesium",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#png",
    "href": "resources/mapwidget_dashboard/index.html#png",
    "title": "MapWidget Cesium",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#mp4",
    "href": "resources/mapwidget_dashboard/index.html#mp4",
    "title": "MapWidget Cesium",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#social",
    "href": "resources/mapwidget_dashboard/index.html#social",
    "title": "MapWidget Cesium",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/panel_chat_pack/index.html",
    "href": "resources/panel_chat_pack/index.html",
    "title": "Panel ChatBot Pack",
    "section": "",
    "text": "Panel Chatbot Pack is a LlamaHub template that enables you to talk to your Github Repository."
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#introduction",
    "href": "resources/panel_chat_pack/index.html#introduction",
    "title": "Panel ChatBot Pack",
    "section": "",
    "text": "Panel Chatbot Pack is a LlamaHub template that enables you to talk to your Github Repository."
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#gif",
    "href": "resources/panel_chat_pack/index.html#gif",
    "title": "Panel ChatBot Pack",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#mp4",
    "href": "resources/panel_chat_pack/index.html#mp4",
    "title": "Panel ChatBot Pack",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#png",
    "href": "resources/panel_chat_pack/index.html#png",
    "title": "Panel ChatBot Pack",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#social",
    "href": "resources/panel_chat_pack/index.html#social",
    "title": "Panel ChatBot Pack",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html",
    "href": "resources/streaming_number_indicators/index.html",
    "title": "Streaming Number Indicators",
    "section": "",
    "text": "Dashboard with streaming Number Indicators. The FlexBox layout used ensures the indicators will layout nicely no matter the window width or device.\nWe use caching to ensure the values are updated globally across all sessions instead of per session when running on a Server."
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#introduction",
    "href": "resources/streaming_number_indicators/index.html#introduction",
    "title": "Streaming Number Indicators",
    "section": "",
    "text": "Dashboard with streaming Number Indicators. The FlexBox layout used ensures the indicators will layout nicely no matter the window width or device.\nWe use caching to ensure the values are updated globally across all sessions instead of per session when running on a Server."
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#app",
    "href": "resources/streaming_number_indicators/index.html#app",
    "title": "Streaming Number Indicators",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces | Open in PyScript.com"
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#code",
    "href": "resources/streaming_number_indicators/index.html#code",
    "title": "Streaming Number Indicators",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"\nSource: https://awesome-panel.org/resources/streaming_number_indicators/\n\"\"\"\nfrom asyncio import create_task, get_event_loop, sleep\n\nimport numpy as np\nimport panel as pn\n\nACCENT = \"#00A170\"\nOK_COLOR = ACCENT\nERROR_COLOR = \"#a10031\"\nALERT = 80\nCOLORS = [(ALERT, OK_COLOR), (100, ERROR_COLOR)]\nINITIAL_VALUE = ALERT - 3\n\nN = 18  # Number of indicators\n\n# Can be removed when https://github.com/holoviz/panel/pull/6194 is released\nCSS_FIX = \"\"\"\n:host(.pn-loading) .pn-loading-msg,\n.pn-loading .pn-loading-msg {\n  color: var(--panel-on-background-color, black) !important; \n}\n\"\"\"\nif not CSS_FIX in pn.config.raw_css:\n    pn.config.raw_css.append(CSS_FIX)\n\n\nasync def update_values(values):\n    \"\"\"Some random updating of values.\"\"\"\n    while True:\n        # Replace with your own code.\n        new_value = np.copy(values.rx.value)\n\n        new_value += np.random.randint(5, size=N) - 2\n        new_value[new_value &lt; 0] = 0\n        new_value[new_value &gt; 99] = 99\n\n        values.rx.value = new_value\n\n        await sleep(1)\n\n\n@pn.cache  # We use caching to share values across all sessions in a server context\ndef get_values():\n    # We use Reactive Expressions https://param.holoviz.org/user_guide/Reactive_Expressions.html\n    return pn.rx([INITIAL_VALUE] * N)\n\n\n@pn.cache  # We use caching to only update values once across all sessions in a server context\ndef create_update_values_task():\n    values = get_values()\n    create_task(update_values(values))\n\n\ndef get_styles(value):\n    if value &lt;= ALERT:\n        return {\"border\": f\"1px solid {OK_COLOR}\", \"padding\": \"1em\", \"border-radius\": \"3px\"}\n    return {\"border\": f\"1px solid {ERROR_COLOR}\", \"padding\": \"1em\", \"border-radius\": \"3px\"}\n\n\ndef create_indicator(index, values):\n    title = f\"Sensor {index}\"\n    value = values[index]\n\n    return pn.indicators.Number(\n        name=title,\n        value=value,\n        format=\"{value}%\",\n        colors=COLORS,\n        margin=10,\n        styles=pn.rx(get_styles)(value),\n        width=165,\n    )\n\n\ndef create_component():\n    values = get_values()\n    indicators = tuple(create_indicator(i, values) for i in range(len(values.rx.value)))\n    layout = pn.FlexBox(*indicators)\n    return layout\n\n\nif pn.state.served or pn.state._is_pyodide:\n    pn.extension()\n\n    if get_event_loop().is_running():\n        # We can only start the stream if the event loop is running\n        create_update_values_task()\n\n    pn.template.FastListTemplate(\n        site=\"Awesome Panel\",\n        site_url=\"https://awesome-panel.org\",\n        title=\"Streaming Number Indicators\",\n        accent=ACCENT,\n        theme=\"dark\",\n        theme_toggle=False,\n        main=[create_component()],\n        main_layout=None,\n    ).servable()\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#gif",
    "href": "resources/streaming_number_indicators/index.html#gif",
    "title": "Streaming Number Indicators",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#mp4",
    "href": "resources/streaming_number_indicators/index.html#mp4",
    "title": "Streaming Number Indicators",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#png",
    "href": "resources/streaming_number_indicators/index.html#png",
    "title": "Streaming Number Indicators",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#social",
    "href": "resources/streaming_number_indicators/index.html#social",
    "title": "Streaming Number Indicators",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html",
    "title": "Table of elements with Wikipedia row content",
    "section": "",
    "text": "This app demonstrates the power of the row_content feature of Panels Tabulator pane. The app contains a table of the elements. When you click a specific row, it expands and you can study the corresponding Wikipedia article.\nThe app was developed from code and discussions in Discourse #6710."
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#introduction",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#introduction",
    "title": "Table of elements with Wikipedia row content",
    "section": "",
    "text": "This app demonstrates the power of the row_content feature of Panels Tabulator pane. The app contains a table of the elements. When you click a specific row, it expands and you can study the corresponding Wikipedia article.\nThe app was developed from code and discussions in Discourse #6710."
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#app",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#app",
    "title": "Table of elements with Wikipedia row content",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#code",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#code",
    "title": "Table of elements with Wikipedia row content",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"\nSource: https://awesome-panel.org/resources/table_of_elements_with_wikipedia_row_content/\n\"\"\"\n\nimport panel as pn\nfrom bokeh.sampledata.periodic_table import elements\n\npn.extension(\"tabulator\")\n\n@pn.cache\ndef get_elements():\n    return elements[\n        [\"atomic number\", \"name\", \"atomic mass\", \"metal\", \"year discovered\"]\n    ].set_index(\"atomic number\")\n\nperiodic_df = get_elements()\n\n# Caching is a hack to avoid flickering. It seems like row content is loaded twice otherwise\n# See https://github.com/holoviz/panel/issues/6200\n@pn.cache\ndef content_fn(row):\n    return pn.pane.HTML(\n        f'&lt;iframe src=\"https://en.wikipedia.org/wiki/{row[\"name\"]}\" width=\"100%\" height=\"500px\"&gt;&lt;/iframe&gt;',\n        sizing_mode=\"stretch_width\"\n    )\n\nperiodic_table = pn.widgets.Tabulator(\n    periodic_df,\n    layout=\"fit_columns\",\n    sizing_mode=\"stretch_both\",\n    row_content=content_fn,\n    embed_content=True,\n)\n\npn.template.FastListTemplate(\n    site=\"Awesome Panel\",\n    site_url=\"https://awesome-panel.org\",\n    title=\"Table of Elements with Wikipedia row content\",\n    main=[periodic_table],\n    accent=\"#F08080\",\n    main_layout=None,\n    main_max_width=\"1024px\",\n).servable()\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#gif",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#gif",
    "title": "Table of elements with Wikipedia row content",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#mp4",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#mp4",
    "title": "Table of elements with Wikipedia row content",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#png",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#png",
    "title": "Table of elements with Wikipedia row content",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#social",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#social",
    "title": "Table of elements with Wikipedia row content",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "",
    "text": "This app shows how to create a nice looking dashboard with param.Rx and Panel."
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#introduction",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#introduction",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "",
    "text": "This app shows how to create a nice looking dashboard with param.Rx and Panel."
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#app",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#app",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#code",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#code",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Code",
    "text": "Code"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#gif",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#gif",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#legacy",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#legacy",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Legacy",
    "text": "Legacy\nThe legacy resources in this section shows how to create the same dashboard using the legacy hvPlot .interactive functionality. This has been superseeded by the generalized param.Rx functionality.\nGithub | Medium"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#mp4",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#mp4",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#png",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#png",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#social",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#social",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/weather_station_viewer/index.html",
    "href": "resources/weather_station_viewer/index.html",
    "title": "Weather Station Viewer",
    "section": "",
    "text": "This very nicely styled app by Andrew Huang allows you to compare a single year of data from a weather station to the average of a range of years.\nYou can read more about the awesome styling applied to the plots in the blog post Create publication-styled figures with hvPlot"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#introduction",
    "href": "resources/weather_station_viewer/index.html#introduction",
    "title": "Weather Station Viewer",
    "section": "",
    "text": "This very nicely styled app by Andrew Huang allows you to compare a single year of data from a weather station to the average of a range of years.\nYou can read more about the awesome styling applied to the plots in the blog post Create publication-styled figures with hvPlot"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#app",
    "href": "resources/weather_station_viewer/index.html#app",
    "title": "Weather Station Viewer",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#code",
    "href": "resources/weather_station_viewer/index.html#code",
    "title": "Weather Station Viewer",
    "section": "Code",
    "text": "Code\nhugging face/ahuang11/year-vs-climatology"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#gif",
    "href": "resources/weather_station_viewer/index.html#gif",
    "title": "Weather Station Viewer",
    "section": "Gif",
    "text": "Gif\nWhat a nicely styled app!"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#mp4",
    "href": "resources/weather_station_viewer/index.html#mp4",
    "title": "Weather Station Viewer",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#png",
    "href": "resources/weather_station_viewer/index.html#png",
    "title": "Weather Station Viewer",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#social",
    "href": "resources/weather_station_viewer/index.html#social",
    "title": "Weather Station Viewer",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  }
]