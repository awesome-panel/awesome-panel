[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Awesome Panel",
    "section": "",
    "text": "Panel by HoloViz is the powerful data exploration & web app framework for Python.\nPlease give Panel a ⭐ on Github. Thanks.\n\nStar\n\n\n\n\n\n\n\n   \n     \n     \n       Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\n\n\nWeather Station Viewer\n\n\n\n\n\n\nclimate\n\n\nhvplot\n\n\nhugging face\n\n\n\nThis app allows you to compare a single year of data from a weather station to the average of a range of years.\n\n\n\n\n\nJan 28, 2024\n\n\nAndrew Huang\n\n\n\n\n\n\n\n\n\n\n\n\nLonboard Dashboard\n\n\n\n\n\n\nanywidget\n\n\ndashboard\n\n\nhugging face\n\n\nipywidgets\n\n\n\nA Dashboard using Lonboard to fast, interactive geospatial vector data visualization.\n\n\n\n\n\nJan 27, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nMapWidget Cesium\n\n\n\n\n\n\nanywidget\n\n\ndashboard\n\n\nhugging face\n\n\nipywidgets\n\n\n\nA dashboard showcasing mapwidget.cesium by Qiusheng Wu\n\n\n\n\n\nJan 27, 2024\n\n\nQiusheng Wu\n\n\n\n\n\n\n\n\n\n\n\n\nHurdat Tracks Viewer\n\n\n\n\n\n\ngeo\n\n\nhugging face\n\n\nmatplotlib\n\n\n\nAn interactive web app for analysing hurricane tracks using Tropycal and Panel\n\n\n\n\n\nJan 25, 2024\n\n\nAndrew Huang\n\n\n\n\n\n\n\n\n\n\n\n\nTable of elements with Wikipedia row content\n\n\n\n\n\n\nchemistry\n\n\nhugging face\n\n\npyodide\n\n\ntabulator\n\n\n\nTable of elements. When you click a row it expands and shows the Wikipedia article. Powered by Tabulator.\n\n\n\n\n\nJan 14, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nCommuting Flows Italy\n\n\n\n\n\n\ngeo\n\n\nhugging face\n\n\npyodide\n\n\n\nA dashboard showing commuting flows between Italian regions\n\n\n\n\n\nJan 13, 2024\n\n\nIvan D’Ortenzio\n\n\n\n\n\n\n\n\n\n\n\n\nStreaming Number Indicators\n\n\n\n\n\n\nhugging face\n\n\npyodide\n\n\npyscript\n\n\nstreaming\n\n\n\nDashboard with streaming Number Indicators\n\n\n\n\n\nJan 13, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nCrossfiltering with HoloViews\n\n\n\n\n\n\nbokeh\n\n\nhugging face\n\n\npyodide\n\n\ntimeseries\n\n\n\nApply a selection in one plot as a filter in other plots\n\n\n\n\n\nJan 8, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nPanel ChatBot Pack\n\n\n\n\n\n\nartificial intelligence\n\n\nllm\n\n\n\nBuild a chatbot with LlamaIndex to talk to your Github repository\n\n\n\n\n\nJan 8, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nThe Easiest Way to Create an Interactive Dashboard in Python\n\n\n\n\n\n\ndashboard\n\n\nhvplot\n\n\nrx\n\n\n\nThe Easiest Way to Create an Interactive Dashboard in Python with param.rx and Panel\n\n\n\n\n\nJan 8, 2024\n\n\nMarc Skov Madsen, Sophia Yang\n\n\n\n\n\n\n\n\n\n\n\n\nClassic Dashboard\n\n\n\n\n\n\ndashboard\n\n\nhvplot\n\n\n\nLearn how to create a classic dashboard\n\n\n\n\n\nJan 7, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nVideo Stream\n\n\n\n\n\n\nhugging face\n\n\npyodide\n\n\nvideo\n\n\n\nImage processing with Pillow and Scikit Image\n\n\n\n\n\nJan 7, 2024\n\n\nMarc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nPanel Chat Examples\n\n\n\n\n\n\nartificial intelligence\n\n\nllm\n\n\n\nA resource of Panel Chat Apps using Mistral, LangChain, LlamaIndex, OpenAI etc.\n\n\n\n\n\nJan 6, 2024\n\n\nAndrew Huang, Marc Skov Madsen\n\n\n\n\n\n\n\n\n\n\n\n\nStumpy\n\n\n\n\n\n\nbokeh\n\n\nhugging face\n\n\npyodide\n\n\ntimeseries\n\n\n\nUse the Stumpy library to identify patterns in timeseries\n\n\n\n\n\nJan 6, 2024\n\n\nMarc Skov Madsen, Sean Law\n\n\n\n\n\n\n\n\n\n\n\n\nTasty Map\n\n\n\n\n\n\ncolor\n\n\nhugging face\n\n\n\nGenerate custom color palettes easily using the TastyMap Panel app\n\n\n\n\n\nJan 6, 2024\n\n\nAndrew Huang\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "resources/video_stream/index.html",
    "href": "resources/video_stream/index.html",
    "title": "Video Stream",
    "section": "",
    "text": "This app takes a videostream from your web cam and applies different filters supplied by Pillow and Scikit Image.\nYou can change the model in the sidebar. The left plot shows how much time it takes to run the model on the image. The right plot shows the time since the last image was processed.\nThis app is heavily inspired by a similar realtime image processing app by Whitphx.\n\nStar"
  },
  {
    "objectID": "resources/video_stream/index.html#introduction",
    "href": "resources/video_stream/index.html#introduction",
    "title": "Video Stream",
    "section": "",
    "text": "This app takes a videostream from your web cam and applies different filters supplied by Pillow and Scikit Image.\nYou can change the model in the sidebar. The left plot shows how much time it takes to run the model on the image. The right plot shows the time since the last image was processed.\nThis app is heavily inspired by a similar realtime image processing app by Whitphx.\n\nStar"
  },
  {
    "objectID": "resources/video_stream/index.html#app",
    "href": "resources/video_stream/index.html#app",
    "title": "Video Stream",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/video_stream/index.html#code",
    "href": "resources/video_stream/index.html#code",
    "title": "Video Stream",
    "section": "Code",
    "text": "Code\n\n\nShow\n\nimport base64\nimport io\nimport time\n\nimport numpy as np\nimport param\nimport PIL\nimport skimage\n\nfrom PIL import Image, ImageFilter\nfrom skimage import data, filters\nfrom skimage.color.adapt_rgb import adapt_rgb, each_channel\nfrom skimage.draw import rectangle\nfrom skimage.exposure import rescale_intensity\nfrom skimage.feature import Cascade\n\nimport panel as pn\nimport sys\n\n\n\nHEIGHT = 600 # pixels\nWIDTH = 600 # pixels\nTIMEOUT = 500 # milliseconds\n\nif sys.platform == 'emscripten':\n    TIMEOUT=100\n\nCSS=\"\"\"\n.mdc-drawer {background: var(--light-bg-color) !important;}\"\"\"\n\npn.extension(raw_css=[CSS], sizing_mode=\"stretch_width\")\n\n\nclass ImageModel(pn.viewable.Viewer):\n    \"\"\"Base class for image models.\"\"\"\n\n    def __init__(self, **params):\n        super().__init__(**params)\n\n        with param.edit_constant(self):\n            self.name = self.__class__.name.replace(\"Model\", \"\")\n        self.view = self.create_view()\n\n    def __panel__(self):\n        return self.view\n\n    def apply(self, image: str, height: int = HEIGHT, width: int = WIDTH) -&gt; str:\n        \"\"\"Transforms a base64 encoded jpg image to a base64 encoded jpg BytesIO object\"\"\"\n        raise NotImplementedError()\n\n    def create_view(self):\n        \"\"\"Creates a view of the parameters of the transform to enable the user to configure them\"\"\"\n        return pn.Param(self, name=self.name)\n\n    def transform(self, image):\n        \"\"\"Transforms the image\"\"\"\n        raise NotImplementedError()\n\n\nclass PILImageModel(ImageModel):\n    \"\"\"Base class for PIL image models\"\"\"\n\n    @staticmethod\n    def to_pil_img(value: str, height=HEIGHT, width=WIDTH):\n        \"\"\"Converts a base64 jpeg image string to a PIL.Image\"\"\"\n        encoded_data = value.split(\",\")[1]\n        base64_decoded = base64.b64decode(encoded_data)\n        image = Image.open(io.BytesIO(base64_decoded))\n        image.draft(\"RGB\", (height, width))\n        return image\n\n    @staticmethod\n    def from_pil_img(image: Image):\n        \"\"\"Converts a PIL.Image to a base64 encoded JPG BytesIO object\"\"\"\n        buff = io.BytesIO()\n        image.save(buff, format=\"JPEG\")\n        return buff\n\n    def apply(self, image: str, height: int = HEIGHT, width: int = WIDTH) -&gt; io.BytesIO:\n        pil_img = self.to_pil_img(image, height=height, width=width)\n\n        transformed_image = self.transform(pil_img)\n\n        return self.from_pil_img(transformed_image)\n\n    def transform(self, image: PIL.Image) -&gt; PIL.Image:\n        \"\"\"Transforms the PIL.Image image\"\"\"\n        raise NotImplementedError()\n\n\nclass NumpyImageModel(ImageModel):\n    \"\"\"Base class for np.ndarray image models\"\"\"\n\n    @staticmethod\n    def to_np_ndarray(image: str, height=HEIGHT, width=WIDTH) -&gt; np.ndarray:\n        \"\"\"Converts a base64 encoded jpeg string to a np.ndarray\"\"\"\n        pil_img = PILImageModel.to_pil_img(image, height=height, width=width)\n        return np.array(pil_img)\n\n    @staticmethod\n    def from_np_ndarray(image: np.ndarray) -&gt; io.BytesIO:\n        \"\"\"Converts np.ndarray jpeg image to a jpeg BytesIO instance\"\"\"\n        if image.dtype == np.dtype(\"float64\"):\n            image = (image * 255).astype(np.uint8)\n        pil_img = PIL.Image.fromarray(image)\n        return PILImageModel.from_pil_img(pil_img)\n\n    def apply(self, image: str, height: int = HEIGHT, width: int = WIDTH) -&gt; io.BytesIO:\n        np_array = self.to_np_ndarray(image, height=height, width=width)\n\n        transformed_image = self.transform(np_array)\n\n        return self.from_np_ndarray(transformed_image)\n\n    def transform(self, image: np.ndarray) -&gt; np.ndarray:\n        \"\"\"Transforms the np.array image\"\"\"\n        raise NotImplementedError()\n\n\nclass Timer(pn.viewable.Viewer):\n    \"\"\"Helper Component used to show duration trends\"\"\"\n\n    _trends = param.Dict()\n\n    def __init__(self, **params):\n        super().__init__()\n\n        self.last_updates = {}\n        self._trends = {}\n\n        self._layout = pn.Row(**params)\n\n    def time_it(self, name, func, *args, **kwargs):\n        \"\"\"Measures the duration of the execution of the func function and reports it under the\n        name specified\"\"\"\n        start = time.time()\n        result = func(*args, **kwargs)\n        end = time.time()\n        duration = round(end - start, 2)\n        self._report(name=name, duration=duration)\n        return result\n\n    def inc_it(self, name):\n        \"\"\"Measures the duration since the last time inc_it was called and reports it under the\n        specified name\"\"\"\n        start = self.last_updates.get(name, time.time())\n        end = time.time()\n        duration = round(end - start, 2)\n        self._report(name=name, duration=duration)\n        self.last_updates[name] = end\n\n    def _report(self, name, duration):\n        if not name in self._trends:\n            self._trends[name] = pn.indicators.Trend(\n                name=name,\n                data={\"x\": [1], \"y\": [duration]},\n                height=100,\n                width=150,\n                sizing_mode=\"fixed\",\n            )\n            self.param.trigger(\"_trends\")\n        else:\n            trend = self._trends[name]\n            next_x = max(trend.data[\"x\"]) + 1\n            trend.stream({\"x\": [next_x], \"y\": [duration]}, rollover=10)\n\n    @param.depends(\"_trends\")\n    def _panel(self):\n        self._layout[:] = list(self._trends.values())\n        return self._layout\n\n    def __panel__(self):\n        return pn.panel(self._panel)\n\n\ndef to_instance(value, **params):\n    \"\"\"Converts the value to an instance\n\n    Args:\n        value: A param.Parameterized class or instance\n\n    Returns:\n        An instance of the param.Parameterized class\n    \"\"\"\n    if isinstance(value, param.Parameterized):\n        value.param.update(**params)\n        return value\n    return value(**params)\n\n\nclass VideoStreamInterface(pn.viewable.Viewer):\n    \"\"\"An easy to use interface for a VideoStream and a set of transforms\"\"\"\n\n    video_stream = param.ClassSelector(\n        class_=pn.widgets.VideoStream, constant=True, doc=\"The source VideoStream\", allow_refs=False,\n    )\n\n    height = param.Integer(\n        default=HEIGHT,\n        bounds=(10, 2000),\n        step=10,\n        doc=\"\"\"The height of the image converted and shown\"\"\",\n    )\n    width = param.Integer(\n        default=WIDTH,\n        bounds=(10, 2000),\n        step=10,\n        doc=\"\"\"The width of the image converted and shown\"\"\",\n    )\n\n    model = param.Selector(doc=\"The currently selected model\")\n\n    def __init__(\n        self,\n        models,\n        timeout=TIMEOUT,\n        paused=False,\n        **params,\n    ):\n        super().__init__(\n            video_stream=pn.widgets.VideoStream(\n                name=\"Video Stream\",\n                timeout=timeout,\n                paused=paused,\n                height=0,\n                width=0,\n                visible=False,\n                format=\"jpeg\",\n            ),\n            **params,\n        )\n        self.image = pn.pane.JPG(\n            height=self.height, width=self.width, sizing_mode=\"fixed\"\n        )\n        self._updating = False\n        models = [to_instance(model) for model in models]\n        self.param.model.objects = models\n        self.model = models[0]\n        self.timer = Timer(sizing_mode=\"stretch_width\")\n        self.settings = self._create_settings()\n        self._panel = self._create_panel()\n\n    def _create_settings(self):\n        return pn.Column(\n            pn.Param(\n                self.video_stream,\n                parameters=[\"timeout\", \"paused\"],\n                widgets={\n                    \"timeout\": {\n                        \"widget_type\": pn.widgets.IntSlider,\n                        \"start\": 10,\n                        \"end\": 2000,\n                        \"step\": 10,\n                    }\n                },\n            ),\n            self.timer,\n            pn.Param(self, parameters=[\"height\", \"width\"], name=\"Image\"),\n            pn.Param(\n                self,\n                parameters=[\"model\"],\n                expand_button=False,\n                expand=False,\n                widgets={\n                    \"model\": {\n                        \"widget_type\": pn.widgets.RadioButtonGroup,\n                        \"orientation\": \"vertical\",\n                        \"button_type\": \"primary\",\n                        \"button_style\": \"outline\"\n                    }\n                },\n                name=\"Model\",\n            ),\n            self._get_transform,\n        )\n\n    def _create_panel(self):\n        return pn.Row(\n            self.video_stream,\n            pn.layout.HSpacer(),\n            self.image,\n            pn.layout.HSpacer(),\n            sizing_mode=\"stretch_width\",\n            align=\"center\",\n        )\n\n    @param.depends(\"height\", \"width\", watch=True)\n    def _update_height_width(self):\n        self.image.height = self.height\n        self.image.width = self.width\n\n    @param.depends(\"model\")\n    def _get_transform(self):\n        # Hack: returning self.transform stops working after browsing the transforms for a while\n        return self.model.view\n\n    def __panel__(self):\n        return self._panel\n\n    @param.depends(\"video_stream.value\", watch=True)\n    def _handle_stream(self):\n        if self._updating:\n            return\n\n        self._updating = True\n        if self.model and self.video_stream.value:\n            value = self.video_stream.value\n            try:\n                image = self.timer.time_it(\n                    name=\"Model\",\n                    func=self.model.apply,\n                    image=value,\n                    height=self.height,\n                    width=self.width,\n                )\n                self.image.object = image\n            except PIL.UnidentifiedImageError:\n                print(\"unidentified image\")\n\n            self.timer.inc_it(\"Last Update\")\n        self._updating = False\n\n\nclass GaussianBlurModel(PILImageModel):\n    \"\"\"Gaussian Blur Model\n\n    https://pillow.readthedocs.io/en/stable/reference/ImageFilter.html#PIL.ImageFilter.GaussianBlur\n    \"\"\"\n\n    radius = param.Integer(default=0, bounds=(0, 10))\n\n    def transform(self, image: Image):\n        return image.filter(ImageFilter.GaussianBlur(radius=self.radius))\n\n\nclass GrayscaleModel(NumpyImageModel):\n    \"\"\"GrayScale Model\n\n    https://scikit-image.org/docs/0.15.x/auto_examples/color_exposure/plot_rgb_to_gray.html\n    \"\"\"\n\n    def transform(self, image: np.ndarray):\n        grayscale = skimage.color.rgb2gray(image[:, :, :3])\n        return skimage.color.gray2rgb(grayscale)\n\n\nclass SobelModel(NumpyImageModel):\n    \"\"\"Sobel Model\n\n    https://scikit-image.org/docs/0.15.x/auto_examples/color_exposure/plot_adapt_rgb.html\n    \"\"\"\n    def transform(self, image):\n\n\n        @adapt_rgb(each_channel)\n        def sobel_each(image):\n            return filters.sobel(image)\n\n        return rescale_intensity(1 - sobel_each(image))\n\n\n@pn.cache()\ndef get_detector():\n    \"\"\"Returns the Cascade detector\"\"\"\n    trained_file = data.lbp_frontal_face_cascade_filename()\n    return Cascade(trained_file)\n\n\nclass FaceDetectionModel(NumpyImageModel):\n    \"\"\"Face detection using a cascade classifier.\n\n    https://scikit-image.org/docs/0.15.x/auto_examples/applications/plot_face_detection.html\n    \"\"\"\n\n    scale_factor = param.Number(default=1.4, bounds=(1.0, 2.0), step=0.1)\n    step_ratio = param.Integer(default=1, bounds=(1, 10))\n    size_x = param.Range(default=(60, 322), bounds=(10, 500))\n    size_y = param.Range(default=(60, 322), bounds=(10, 500))\n\n    def transform(self, image):\n        detector = get_detector()\n        detected = detector.detect_multi_scale(\n            img=image,\n            scale_factor=self.scale_factor,\n            step_ratio=self.step_ratio,\n            min_size=(self.size_x[0], self.size_y[0]),\n            max_size=(self.size_x[1], self.size_y[1]),\n        )\n\n        for patch in detected:\n            rrr, ccc = rectangle(\n                start=(patch[\"r\"], patch[\"c\"]),\n                extent=(patch[\"height\"], patch[\"width\"]),\n                shape=image.shape[:2],\n            )\n            image[rrr, ccc, 0] = 200\n\n        return image\n\n\ncomponent = VideoStreamInterface(\n    models=[\n        GaussianBlurModel,\n        GrayscaleModel,\n        SobelModel,\n        FaceDetectionModel,\n    ]\n)\npn.Row(pn.Row(component.settings, max_width=300), component)\n\n\npn.template.MaterialTemplate(\n    site=\"Awesome Panel\",\n    title=\"VideoStream with ScikitImage\",\n    sidebar=[component.settings],\n    main=[component],\n).servable()\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/video_stream/index.html#gif",
    "href": "resources/video_stream/index.html#gif",
    "title": "Video Stream",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/video_stream/index.html#mp4",
    "href": "resources/video_stream/index.html#mp4",
    "title": "Video Stream",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/video_stream/index.html#png",
    "href": "resources/video_stream/index.html#png",
    "title": "Video Stream",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/video_stream/index.html#social",
    "href": "resources/video_stream/index.html#social",
    "title": "Video Stream",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/tastymap/index.html",
    "href": "resources/tastymap/index.html",
    "title": "Tasty Map",
    "section": "",
    "text": "TastyMap makes it easy to customize and use colormaps, any way you like.\nThe app is a Panel app.\n\nStar"
  },
  {
    "objectID": "resources/tastymap/index.html#introduction",
    "href": "resources/tastymap/index.html#introduction",
    "title": "Tasty Map",
    "section": "",
    "text": "TastyMap makes it easy to customize and use colormaps, any way you like.\nThe app is a Panel app.\n\nStar"
  },
  {
    "objectID": "resources/tastymap/index.html#app",
    "href": "resources/tastymap/index.html#app",
    "title": "Tasty Map",
    "section": "App",
    "text": "App\n\n\n\nOpen in Spaces"
  },
  {
    "objectID": "resources/tastymap/index.html#gif",
    "href": "resources/tastymap/index.html#gif",
    "title": "Tasty Map",
    "section": "Gif",
    "text": "Gif\nWhat a colorful app!"
  },
  {
    "objectID": "resources/tastymap/index.html#mp4",
    "href": "resources/tastymap/index.html#mp4",
    "title": "Tasty Map",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/tastymap/index.html#png",
    "href": "resources/tastymap/index.html#png",
    "title": "Tasty Map",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/tastymap/index.html#social",
    "href": "resources/tastymap/index.html#social",
    "title": "Tasty Map",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/stumpy/index.html",
    "href": "resources/stumpy/index.html",
    "title": "Stumpy",
    "section": "",
    "text": "STUMPY is a powerful and scalable Python library for identifying repeating patterns in your timeseries. It does this by efficiently computing something called a matrix profile.\nThe app is a Bokeh app wrapped in a nice Panel template.\n\nStar"
  },
  {
    "objectID": "resources/stumpy/index.html#introduction",
    "href": "resources/stumpy/index.html#introduction",
    "title": "Stumpy",
    "section": "",
    "text": "STUMPY is a powerful and scalable Python library for identifying repeating patterns in your timeseries. It does this by efficiently computing something called a matrix profile.\nThe app is a Bokeh app wrapped in a nice Panel template.\n\nStar"
  },
  {
    "objectID": "resources/stumpy/index.html#app",
    "href": "resources/stumpy/index.html#app",
    "title": "Stumpy",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert."
  },
  {
    "objectID": "resources/stumpy/index.html#gif",
    "href": "resources/stumpy/index.html#gif",
    "title": "Stumpy",
    "section": "Gif",
    "text": "Gif\nI think the app looks amazing. Its really performant too."
  },
  {
    "objectID": "resources/stumpy/index.html#mp4",
    "href": "resources/stumpy/index.html#mp4",
    "title": "Stumpy",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/stumpy/index.html#png",
    "href": "resources/stumpy/index.html#png",
    "title": "Stumpy",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/stumpy/index.html#social",
    "href": "resources/stumpy/index.html#social",
    "title": "Stumpy",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/panel_chat_pack/index.html",
    "href": "resources/panel_chat_pack/index.html",
    "title": "Panel ChatBot Pack",
    "section": "",
    "text": "Panel Chatbot Pack is a LlamaHub template that enables you to talk to your Github Repository."
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#introduction",
    "href": "resources/panel_chat_pack/index.html#introduction",
    "title": "Panel ChatBot Pack",
    "section": "",
    "text": "Panel Chatbot Pack is a LlamaHub template that enables you to talk to your Github Repository."
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#gif",
    "href": "resources/panel_chat_pack/index.html#gif",
    "title": "Panel ChatBot Pack",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#mp4",
    "href": "resources/panel_chat_pack/index.html#mp4",
    "title": "Panel ChatBot Pack",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#png",
    "href": "resources/panel_chat_pack/index.html#png",
    "title": "Panel ChatBot Pack",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/panel_chat_pack/index.html#social",
    "href": "resources/panel_chat_pack/index.html#social",
    "title": "Panel ChatBot Pack",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html",
    "href": "resources/mapwidget_dashboard/index.html",
    "title": "MapWidget Cesium",
    "section": "",
    "text": "The mapwidget package by Qiusheng Wu provides a set of custom map widgets for creating interactive maps in a Jupyter environment using different JavaScript mapping libraries, such as Cesium, Mapbox, MapLibre, Leaflet, and OpenLayers.\nHere we show that mapwidget.cesium also works with Panel."
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#introduction",
    "href": "resources/mapwidget_dashboard/index.html#introduction",
    "title": "MapWidget Cesium",
    "section": "",
    "text": "The mapwidget package by Qiusheng Wu provides a set of custom map widgets for creating interactive maps in a Jupyter environment using different JavaScript mapping libraries, such as Cesium, Mapbox, MapLibre, Leaflet, and OpenLayers.\nHere we show that mapwidget.cesium also works with Panel."
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#app",
    "href": "resources/mapwidget_dashboard/index.html#app",
    "title": "MapWidget Cesium",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#code",
    "href": "resources/mapwidget_dashboard/index.html#code",
    "title": "MapWidget Cesium",
    "section": "Code",
    "text": "Code\n\nhugging face/awesome-panel/mapwidget_cesium"
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#gif",
    "href": "resources/mapwidget_dashboard/index.html#gif",
    "title": "MapWidget Cesium",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#png",
    "href": "resources/mapwidget_dashboard/index.html#png",
    "title": "MapWidget Cesium",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#mp4",
    "href": "resources/mapwidget_dashboard/index.html#mp4",
    "title": "MapWidget Cesium",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/mapwidget_dashboard/index.html#social",
    "href": "resources/mapwidget_dashboard/index.html#social",
    "title": "MapWidget Cesium",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html",
    "href": "resources/hurdat_tracks_viewer/index.html",
    "title": "Hurdat Tracks Viewer",
    "section": "",
    "text": "The Hurdat Tracks Viewer medium post by Andrew Huang show you how to to turn a script, that outputs an image of a hurricane track, into a shareable app, and the best practices to improve the UX.\nThe script is from the Tropycal Python package."
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#introduction",
    "href": "resources/hurdat_tracks_viewer/index.html#introduction",
    "title": "Hurdat Tracks Viewer",
    "section": "",
    "text": "The Hurdat Tracks Viewer medium post by Andrew Huang show you how to to turn a script, that outputs an image of a hurricane track, into a shareable app, and the best practices to improve the UX.\nThe script is from the Tropycal Python package."
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#app",
    "href": "resources/hurdat_tracks_viewer/index.html#app",
    "title": "Hurdat Tracks Viewer",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#code",
    "href": "resources/hurdat_tracks_viewer/index.html#code",
    "title": "Hurdat Tracks Viewer",
    "section": "Code",
    "text": "Code\n\nhugging face/ahuang11/hurdat_tracks_viewer"
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#gif",
    "href": "resources/hurdat_tracks_viewer/index.html#gif",
    "title": "Hurdat Tracks Viewer",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#mp4",
    "href": "resources/hurdat_tracks_viewer/index.html#mp4",
    "title": "Hurdat Tracks Viewer",
    "section": "MP4",
    "text": "MP4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#png",
    "href": "resources/hurdat_tracks_viewer/index.html#png",
    "title": "Hurdat Tracks Viewer",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/hurdat_tracks_viewer/index.html#social",
    "href": "resources/hurdat_tracks_viewer/index.html#social",
    "title": "Hurdat Tracks Viewer",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html",
    "href": "resources/commuting_flows_italy/index.html",
    "title": "Commuting Flows Italy",
    "section": "",
    "text": "A dashboard by Ivan D’Ortenzio showing incoming and outgoing commuting flows between Italian regions."
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#introduction",
    "href": "resources/commuting_flows_italy/index.html#introduction",
    "title": "Commuting Flows Italy",
    "section": "",
    "text": "A dashboard by Ivan D’Ortenzio showing incoming and outgoing commuting flows between Italian regions."
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#app",
    "href": "resources/commuting_flows_italy/index.html#app",
    "title": "Commuting Flows Italy",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces | Open in PyScript.com"
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#code",
    "href": "resources/commuting_flows_italy/index.html#code",
    "title": "Commuting Flows Italy",
    "section": "Code",
    "text": "Code\n\nhugging face/awesome-panel/commuting_flows_italy"
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#gif",
    "href": "resources/commuting_flows_italy/index.html#gif",
    "title": "Commuting Flows Italy",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#mp4",
    "href": "resources/commuting_flows_italy/index.html#mp4",
    "title": "Commuting Flows Italy",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#png",
    "href": "resources/commuting_flows_italy/index.html#png",
    "title": "Commuting Flows Italy",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/commuting_flows_italy/index.html#social",
    "href": "resources/commuting_flows_italy/index.html#social",
    "title": "Commuting Flows Italy",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Awesome Panel",
    "section": "",
    "text": "We want to show how awesome Panel by HoloViz is and push the framework forward.\nPlease give awesome-panel a ⭐ on Github. Thanks.\nStar"
  },
  {
    "objectID": "about.html#pyodide-apps",
    "href": "about.html#pyodide-apps",
    "title": "Awesome Panel",
    "section": "Pyodide Apps",
    "text": "Pyodide Apps\nWe distribute most of our apps as apps that run entirely in the browser via Pyodide and panel convert. We do this because we don’t have the resources to pay for and maintain servers. They do take longer time to load than apps server on a server."
  },
  {
    "objectID": "about.html#marc-skov-madsen",
    "href": "about.html#marc-skov-madsen",
    "title": "Awesome Panel",
    "section": "Marc Skov Madsen",
    "text": "Marc Skov Madsen\nThis site is mainly build in the spare time of Marc Skov Madsen, Head of Trading Applications & Insights at Orsted. Follow on X and Linked In."
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html",
    "href": "resources/classic_dashboard/classic_dashboard.html",
    "title": "Classic Dashboard",
    "section": "",
    "text": "The app shows you how to create a Classic Dashboard in Panel with\n\nClassic Layout and design\nResponsiveness\nUser Selections"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#introduction",
    "href": "resources/classic_dashboard/classic_dashboard.html#introduction",
    "title": "Classic Dashboard",
    "section": "",
    "text": "The app shows you how to create a Classic Dashboard in Panel with\n\nClassic Layout and design\nResponsiveness\nUser Selections"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#app",
    "href": "resources/classic_dashboard/classic_dashboard.html#app",
    "title": "Classic Dashboard",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#code",
    "href": "resources/classic_dashboard/classic_dashboard.html#code",
    "title": "Classic Dashboard",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"\nSee https://awesome-panel.org/resources/classic_dashboard/\n\"\"\"\nimport pathlib\n\nimport holoviews as hv\nimport hvplot.pandas  # pylint: disable=unused-import\nimport pandas as pd\nimport panel as pn\nimport param\nfrom holoviews.plotting.util import process_cmap\n\nDASHBOARD_A_PATH=\"https://cdn.awesome-panel.org/resources/classic_dashboard/dashboard_A.csv\"\nDASHBOARD_B_PATH=\"https://cdn.awesome-panel.org/resources/classic_dashboard/dashboard_B.csv\"\n\nCOLOR_MAPS = hv.plotting.util.list_cmaps()\nSTYLE = \"\"\"\nbody {\n    margin: 0px;\n    min-height: 100vh;\n    overflow-x: hidden;\n    width: 100%;\n    background: #f2f2f2;\n}\n.bk.app-body {\n    background: #f2f2f2;\n    color: #000000;\n    font-family: roboto, sans-serif, Verdana;\n}\n.bk.app-bar {\n    background: #212121;\n    border-color: white;\n    box-shadow: 5px 5px 20px #9E9E9E;\n    color: #ffffff;\n    z-index: 50;\n}\n.bk.app-container {\n    background: #ffffff;\n    border-radius: 5px;\n    box-shadow: 2px 2px 2px lightgrey;\n    color: #000000;\n}\n\n.bk.app-settings {\n    background: #e0e0e0;\n    color: #000000;\n}\n\n\"\"\"\n\n@pn.cache\ndef _get_data_a():\n    return pd.read_csv(DASHBOARD_A_PATH, index_col=0)\n\n@pn.cache\ndef _get_data_b():\n    return pd.read_csv(DASHBOARD_B_PATH, index_col=0)\n\n\nclass Dashboard(pn.viewable.Viewer):\n    \"\"\"This application show cases how to build a Classic Dashboard\n    in Panel.\n    \"\"\"\n\n    tool = param.ObjectSelector(label=\"Tool\", default=\"S1_1\", objects=[\"S1_1\", \"S2_1\"])\n    variable = param.ObjectSelector(\n        label=\"Variable\",\n        default=\"Cut Distance\",\n        objects=[\"Cut Distance\", \"Removed Volume\", \"Av. uncut chip thickness\"],\n    )\n    color_map = param.ObjectSelector(default=\"rainbow\", objects=COLOR_MAPS)\n\n    view = param.ClassSelector(class_=pn.Column)\n\n    def __init__(self, **params):\n        super().__init__(**params)\n\n        self.insert_plot_pane = pn.pane.HoloViews(\n            self._get_insert_plot, sizing_mode=\"stretch_width\", margin=10, height=300\n        )\n        self.edge_plot_pane = pn.pane.HoloViews(\n            self._get_edge_plot, sizing_mode=\"stretch_width\", margin=10, height=300\n        )\n        self.history_plot_pane = pn.pane.HoloViews(\n            self._update_history_plot, sizing_mode=\"stretch_width\", margin=10, height=300\n        )\n        self.view = pn.Column(sizing_mode=\"stretch_both\")\n        self._init_view()\n\n    def _init_view(self):\n        appbar = pn.Row(\n            pn.pane.Markdown(\n                \"#### Classic Dashboard in Panel \",\n                margin=(15, 5, 5, 25),\n                sizing_mode=\"stretch_width\",\n                align=\"center\",\n            ),\n            pn.layout.HSpacer(height=0),\n            pn.pane.PNG(\n                \"https://panel.holoviz.org/_static/logo_horizontal.png\",\n                width=200,\n                align=\"center\",\n                sizing_mode=\"fixed\",\n                margin=(10, 50, 10, 5),\n                embed=False,\n            ),\n            sizing_mode=\"stretch_width\",\n            css_classes=[\"app-bar\"],\n        )\n        settings_bar = pn.Column(\n            pn.Param(\n                self,\n                parameters=[\"tool\", \"variable\", \"color_map\"],\n                widgets={\n                    \"tool\": {\"align\": \"center\", \"width\": 75, \"sizing_mode\": \"fixed\"},\n                    \"variable\": {\n                        \"type\": pn.widgets.RadioBoxGroup,\n                        \"inline\": True,\n                        \"align\": \"end\",\n                        \"sizing_mode\": \"stretch_width\",\n                    },\n                },\n                default_layout=pn.Row,\n                show_name=False,\n                sizing_mode=\"stretch_width\",\n            ),\n            pn.layout.HSpacer(height=0),\n            sizing_mode=\"stretch_width\",\n            css_classes=[\"app-container\"],\n            margin=(50, 25, 25, 25),\n        )\n\n        self.view[:] = [  # pylint: disable=unsupported-assignment-operation\n            pn.Column(\n                appbar,\n                settings_bar,\n                pn.Row(\n                    pn.Column(\n                        self.insert_plot_pane,\n                        css_classes=[\"app-container\"],\n                        margin=25,\n                        sizing_mode=\"stretch_both\",\n                    ),\n                    pn.Column(\n                        self.edge_plot_pane,\n                        css_classes=[\"app-container\"],\n                        margin=25,\n                        sizing_mode=\"stretch_both\",\n                    ),\n                    sizing_mode=\"stretch_both\",\n                    min_height=300,\n                ),\n                pn.Row(\n                    self.history_plot_pane,\n                    css_classes=[\"app-container\"],\n                    margin=25,\n                    min_height=300,\n                    sizing_mode=\"stretch_both\",\n                ),\n                css_classes=[\"app-body\"],\n                sizing_mode=\"stretch_both\",\n            ),\n            pn.layout.HSpacer(height=25),\n        ]\n\n    @pn.depends(\"tool\", \"variable\", \"color_map\")\n    def _get_insert_plot(self):\n        plot_data = _get_data_a().loc[self.tool]\n        data = [(plot_data[\"Xo\"], plot_data[\"Yo\"], plot_data[self.variable])]\n        return hv.Path(data, vdims=self.variable).opts(\n            cmap=self.color_map, color=self.variable, line_width=4, colorbar=True, responsive=True\n        )\n\n    @pn.depends(\"tool\", \"variable\", \"color_map\")\n    def _get_edge_plot(self):\n        plot_data = _get_data_a().loc[self.tool]\n        return plot_data.hvplot(\n            x=\"Number\", y=self.variable, kind=\"area\", alpha=0.6, color=self._color, responsive=True\n        )\n\n    @pn.depends(\"tool\", \"color_map\")\n    def _update_history_plot(self):\n        plot_data = _get_data_b().loc[self.tool]\n        return plot_data.hvplot(\n            x=\"Cut Distance\", y=\"Feed\", kind=\"line\", line_width=4, responsive=True\n        ).opts(color=self._color)\n\n    @property\n    def _color(self):\n        return process_cmap(self.color_map, 1)[0]\n\n\nif pn.state.served:\n    pn.extension(raw_css=[STYLE], design=\"bootstrap\")\n    Dashboard().view.servable()\n    \n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#gif",
    "href": "resources/classic_dashboard/classic_dashboard.html#gif",
    "title": "Classic Dashboard",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#mp4",
    "href": "resources/classic_dashboard/classic_dashboard.html#mp4",
    "title": "Classic Dashboard",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#png",
    "href": "resources/classic_dashboard/classic_dashboard.html#png",
    "title": "Classic Dashboard",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/classic_dashboard/classic_dashboard.html#social",
    "href": "resources/classic_dashboard/classic_dashboard.html#social",
    "title": "Classic Dashboard",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html",
    "href": "resources/crossfiltering_holoviews/index.html",
    "title": "Crossfiltering with HoloViews",
    "section": "",
    "text": "Crossfiltering lets you interact with one chart and apply that interaction as a filter to other charts in the report.\nWith HoloViews you can add crossfiltering to your hvPlot or Holoviews plots. Check out the Linked Brushing Reference Guide."
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#introduction",
    "href": "resources/crossfiltering_holoviews/index.html#introduction",
    "title": "Crossfiltering with HoloViews",
    "section": "",
    "text": "Crossfiltering lets you interact with one chart and apply that interaction as a filter to other charts in the report.\nWith HoloViews you can add crossfiltering to your hvPlot or Holoviews plots. Check out the Linked Brushing Reference Guide."
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#app",
    "href": "resources/crossfiltering_holoviews/index.html#app",
    "title": "Crossfiltering with HoloViews",
    "section": "App",
    "text": "App\n\nBokeh\n\n\n\n\nPlotly\nFor the Plotly backend I cannot get responsive plots working. That is why I use fixed sizes. See Panel #6173.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#code",
    "href": "resources/crossfiltering_holoviews/index.html#code",
    "title": "Crossfiltering with HoloViews",
    "section": "Code",
    "text": "Code\n\n\nShow Bokeh\n\n\"\"\"*Linked Brushing* is a very powerful technique. It's also often called\n*Linked Selections* or *Crossfiltering*.\n\nThis example is inspired by the HoloViews [Linked Brushing Reference Guide]\\\n(http://holoviews.org/user_guide/Linked_Brushing.html) and the Plotly blog post\n[Introducing Dash HoloViews]\\\n(https://medium.com/plotly/introducing-dash-holoviews-6a05c088ebe5).\n\nThis example uses the *Iris* dataset.\n\"\"\"\nfrom typing import Tuple\n\nimport holoviews as hv\nimport pandas as pd\nimport panel as pn\nfrom holoviews import opts\nfrom panel.template import FastListTemplate\n\n\n@pn.cache\ndef get_iris_data():\n    return pd.read_csv(\"https://cdn.awesome-panel.org/resources/crossfiltering_holoviews/iris.csv.gz\")\n\n\nACCENT = \"#F08080\"\n\nCSS = \"\"\"\n.main .card-margin.stretch_both {\n    height: calc(50vh - 65px) !important;\n}\n\"\"\"\nif not CSS in pn.config.raw_css:\n    pn.config.raw_css.append(CSS)\n\nBOKEH_TOOLS = {\n    \"tools\": [\"hover\"], \"active_tools\": [\"box_select\"]\n}\n\n\ndef get_linked_plots() -&gt; Tuple:\n    \"\"\"Returns a tuple (scatter, hist) of linked plots\n    \n    See http://holoviews.org/user_guide/Linked_Brushing.html\n    \"\"\"\n\n    dataset = hv.Dataset(get_iris_data())\n\n    scatter = hv.Scatter(dataset, kdims=[\"sepal_length\"], vdims=[\"sepal_width\"])\n    hist = hv.operation.histogram(dataset, dimension=\"petal_width\", normed=False)\n\n    # pylint: disable=no-value-for-parameter\n    selection_linker = hv.selection.link_selections.instance()\n    # pylint: disable=no-member\n    scatter = selection_linker(scatter).opts(\n        opts.Scatter(color=ACCENT, responsive=True, size=10, **BOKEH_TOOLS),\n    )\n    hist = selection_linker(hist).opts(\n        opts.Histogram(color=ACCENT, responsive=True, **BOKEH_TOOLS)\n    )\n\n    return scatter, hist\n\n\ndef create_app():\n    \"\"\"Returns the app in a nice FastListTemplate\"\"\"\n    scatter, hist = get_linked_plots()\n    scatter_panel = pn.pane.HoloViews(scatter, sizing_mode=\"stretch_both\")\n    hist_panel = pn.pane.HoloViews(hist, sizing_mode=\"stretch_both\")\n    \n    template = FastListTemplate(\n        site=\"Awesome Panel\",\n        site_url=\"https://awesome-panel.org\",\n        title=\"Crossfiltering with HoloViews and Bokeh\",\n        accent=ACCENT,\n        main=[\n            # We need to wrap in Columns to get them to stretch properly\n            pn.Column(scatter_panel, sizing_mode=\"stretch_both\"),\n            pn.Column(hist_panel, sizing_mode=\"stretch_both\"),\n        ],\n    )\n    return template\n\npn.extension()\nhv.extension(\"bokeh\")\ncreate_app().servable()\n\n\n\nShow Plotly\n\n\"\"\"*Linked Brushing* is a very powerful technique. It's also often called\n*Linked Selections* or *Crossfiltering*.\n\nThis example is inspired by the HoloViews [Linked Brushing Reference Guide]\\\n(http://holoviews.org/user_guide/Linked_Brushing.html) and the Plotly blog post\n[Introducing Dash HoloViews]\\\n(https://medium.com/plotly/introducing-dash-holoviews-6a05c088ebe5).\n\nThis example uses the *Iris* dataset.\n\"\"\"\nfrom typing import Tuple\n\nimport holoviews as hv\nimport panel as pn\nfrom holoviews import opts\nfrom panel.template import FastListTemplate\nimport plotly.io as pio\nimport pandas as pd\n\n@pn.cache\ndef get_iris_data():\n    return pd.read_csv(\"https://cdn.awesome-panel.org/resources/crossfiltering_holoviews/iris.csv.gz\")\n\n\nACCENT = \"#F08080\"\n\nCSS = \"\"\"\n.main .card-margin.stretch_both {\n    height: calc(100vh - 125px) !important;\n}\n\"\"\"\n\ndef _plotly_hooks(plot, element):\n    \"\"\"Used by HoloViews to give plots plotly plots special treatment\"\"\"\n    fig = plot.state\n    \n    fig[\"layout\"][\"dragmode\"] = \"select\"\n    fig[\"config\"][\"displayModeBar\"] = True\n    if isinstance(element, hv.Histogram):\n        # Constrain histogram selection direction to horizontal\n        fig[\"layout\"][\"selectdirection\"] = \"h\"\n\n\ndef get_linked_plots() -&gt; Tuple:\n    \"\"\"Returns a tuple (scatter, hist) of linked plots\n    \n    See http://holoviews.org/user_guide/Linked_Brushing.html\n    \"\"\"\n\n    dataset = hv.Dataset(get_iris_data())\n\n    scatter = hv.Scatter(dataset, kdims=[\"sepal_length\"], vdims=[\"sepal_width\"])\n    hist = hv.operation.histogram(dataset, dimension=\"petal_width\", normed=False)\n\n    # pylint: disable=no-value-for-parameter\n    selection_linker = hv.selection.link_selections.instance()\n    # pylint: disable=no-member\n    scatter = selection_linker(scatter).opts(\n        opts.Scatter(color=ACCENT, size=10, hooks=[_plotly_hooks], width=700, height=400),\n    )\n    hist = selection_linker(hist).opts(\n        opts.Histogram(color=ACCENT, hooks=[_plotly_hooks], width=700, height=400)\n    )\n\n    return scatter, hist\n\n\ndef create_app():\n    \"\"\"Returns the app in a nice FastListTemplate\"\"\"\n    if pn.config.theme == \"dark\":\n        pio.templates.default = \"plotly_dark\"\n    else:\n        pio.templates.default = \"plotly_white\"\n    scatter, hist = get_linked_plots()\n    scatter_panel = pn.pane.HoloViews(scatter, sizing_mode=\"stretch_both\", backend=\"plotly\")\n    hist_panel = pn.pane.HoloViews(hist, sizing_mode=\"stretch_both\", backend=\"plotly\")\n\n    def reset(event):\n        scatter, hist = get_linked_plots()\n        scatter_panel.object=scatter\n        hist_panel.object=hist\n\n    reset_button = pn.widgets.Button(name=\"RESET PLOTS\", on_click=reset, description=\"Resets the plots. Plotly does not have a built in way to do this.\")\n    \n    template = FastListTemplate(\n        site=\"Awesome Panel\",\n        site_url=\"https://awesome-panel.org\",\n        title=\"Crossfiltering with HoloViews and Plotly\",\n        accent=ACCENT,\n        main=[\n            # We need to wrap in Columns to get them to stretch properly\n            pn.Column(reset_button, scatter_panel, pn.layout.Spacer(height=20), hist_panel, height=870, sizing_mode=\"stretch_width\"),\n        ],\n        main_max_width=\"850px\",\n    )\n    return template\n\npn.extension(\"plotly\", raw_css=[CSS])\nhv.extension(\"plotly\")\ncreate_app().servable()"
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#gif",
    "href": "resources/crossfiltering_holoviews/index.html#gif",
    "title": "Crossfiltering with HoloViews",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#mp4",
    "href": "resources/crossfiltering_holoviews/index.html#mp4",
    "title": "Crossfiltering with HoloViews",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#png",
    "href": "resources/crossfiltering_holoviews/index.html#png",
    "title": "Crossfiltering with HoloViews",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/crossfiltering_holoviews/index.html#social",
    "href": "resources/crossfiltering_holoviews/index.html#social",
    "title": "Crossfiltering with HoloViews",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html",
    "href": "resources/lonboard_dashboard/index.html",
    "title": "Lonboard Dashboard",
    "section": "",
    "text": "Lonboard is a Python library for fast, interactive geospatial vector data visualization in Jupyter. But it also works with Panel.\nFor more info check out the Lonboard-Panel guide."
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#introduction",
    "href": "resources/lonboard_dashboard/index.html#introduction",
    "title": "Lonboard Dashboard",
    "section": "",
    "text": "Lonboard is a Python library for fast, interactive geospatial vector data visualization in Jupyter. But it also works with Panel.\nFor more info check out the Lonboard-Panel guide."
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#app",
    "href": "resources/lonboard_dashboard/index.html#app",
    "title": "Lonboard Dashboard",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#code",
    "href": "resources/lonboard_dashboard/index.html#code",
    "title": "Lonboard Dashboard",
    "section": "Code",
    "text": "Code\n\nhugging face/awesome-panel/lonboard_dashboard"
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#gif",
    "href": "resources/lonboard_dashboard/index.html#gif",
    "title": "Lonboard Dashboard",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#png",
    "href": "resources/lonboard_dashboard/index.html#png",
    "title": "Lonboard Dashboard",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#mp4",
    "href": "resources/lonboard_dashboard/index.html#mp4",
    "title": "Lonboard Dashboard",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/lonboard_dashboard/index.html#social",
    "href": "resources/lonboard_dashboard/index.html#social",
    "title": "Lonboard Dashboard",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/panel_chat_examples/index.html",
    "href": "resources/panel_chat_examples/index.html",
    "title": "Panel Chat Examples",
    "section": "",
    "text": "Panel Chat Examples provides example Panel Chat Apps.\nPanels Chat Components are multi modal and supports LangChain, OpenAI, Mistral, Llama, etc.\n\nStar"
  },
  {
    "objectID": "resources/panel_chat_examples/index.html#introduction",
    "href": "resources/panel_chat_examples/index.html#introduction",
    "title": "Panel Chat Examples",
    "section": "",
    "text": "Panel Chat Examples provides example Panel Chat Apps.\nPanels Chat Components are multi modal and supports LangChain, OpenAI, Mistral, Llama, etc.\n\nStar"
  },
  {
    "objectID": "resources/panel_chat_examples/index.html#mp4",
    "href": "resources/panel_chat_examples/index.html#mp4",
    "title": "Panel Chat Examples",
    "section": "MP4",
    "text": "MP4"
  },
  {
    "objectID": "resources/panel_chat_examples/index.html#social",
    "href": "resources/panel_chat_examples/index.html#social",
    "title": "Panel Chat Examples",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html",
    "href": "resources/streaming_number_indicators/index.html",
    "title": "Streaming Number Indicators",
    "section": "",
    "text": "Dashboard with streaming Number Indicators. The FlexBox layout used ensures the indicators will layout nicely no matter the window width or device.\nWe use caching to ensure the values are updated globally across all sessions instead of per session when running on a Server."
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#introduction",
    "href": "resources/streaming_number_indicators/index.html#introduction",
    "title": "Streaming Number Indicators",
    "section": "",
    "text": "Dashboard with streaming Number Indicators. The FlexBox layout used ensures the indicators will layout nicely no matter the window width or device.\nWe use caching to ensure the values are updated globally across all sessions instead of per session when running on a Server."
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#app",
    "href": "resources/streaming_number_indicators/index.html#app",
    "title": "Streaming Number Indicators",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces | Open in PyScript.com"
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#code",
    "href": "resources/streaming_number_indicators/index.html#code",
    "title": "Streaming Number Indicators",
    "section": "Code",
    "text": "Code\n\n\nShow\n\n\"\"\"\nSource: https://awesome-panel.org/resources/streaming_number_indicators/\n\"\"\"\nfrom asyncio import create_task, get_event_loop, sleep\n\nimport numpy as np\nimport panel as pn\n\nACCENT = \"#00A170\"\nOK_COLOR = ACCENT\nERROR_COLOR = \"#a10031\"\nALERT = 80\nCOLORS = [(ALERT, OK_COLOR), (100, ERROR_COLOR)]\nINITIAL_VALUE = ALERT - 3\n\nN = 18  # Number of indicators\n\n# Can be removed when https://github.com/holoviz/panel/pull/6194 is released\nCSS_FIX = \"\"\"\n:host(.pn-loading) .pn-loading-msg,\n.pn-loading .pn-loading-msg {\n  color: var(--panel-on-background-color, black) !important; \n}\n\"\"\"\nif not CSS_FIX in pn.config.raw_css:\n    pn.config.raw_css.append(CSS_FIX)\n\n\nasync def update_values(values):\n    \"\"\"Some random updating of values.\"\"\"\n    while True:\n        # Replace with your own code.\n        new_value = np.copy(values.rx.value)\n\n        new_value += np.random.randint(5, size=N) - 2\n        new_value[new_value &lt; 0] = 0\n        new_value[new_value &gt; 99] = 99\n\n        values.rx.value = new_value\n\n        await sleep(1)\n\n\n@pn.cache  # We use caching to share values across all sessions in a server context\ndef get_values():\n    # We use Reactive Expressions https://param.holoviz.org/user_guide/Reactive_Expressions.html\n    return pn.rx([INITIAL_VALUE] * N)\n\n\n@pn.cache  # We use caching to only update values once across all sessions in a server context\ndef create_update_values_task():\n    values = get_values()\n    create_task(update_values(values))\n\n\ndef get_styles(value):\n    if value &lt;= ALERT:\n        return {\"border\": f\"1px solid {OK_COLOR}\", \"padding\": \"1em\", \"border-radius\": \"3px\"}\n    return {\"border\": f\"1px solid {ERROR_COLOR}\", \"padding\": \"1em\", \"border-radius\": \"3px\"}\n\n\ndef create_indicator(index, values):\n    title = f\"Sensor {index}\"\n    value = values[index]\n\n    return pn.indicators.Number(\n        name=title,\n        value=value,\n        format=\"{value}%\",\n        colors=COLORS,\n        margin=10,\n        styles=pn.rx(get_styles)(value),\n        width=165,\n    )\n\n\ndef create_component():\n    values = get_values()\n    indicators = tuple(create_indicator(i, values) for i in range(len(values.rx.value)))\n    layout = pn.FlexBox(*indicators)\n    return layout\n\n\nif pn.state.served or pn.state._is_pyodide:\n    pn.extension()\n\n    if get_event_loop().is_running():\n        # We can only start the stream if the event loop is running\n        create_update_values_task()\n\n    pn.template.FastListTemplate(\n        site=\"Awesome Panel\",\n        site_url=\"https://awesome-panel.org\",\n        title=\"Streaming Number Indicators\",\n        accent=ACCENT,\n        theme=\"dark\",\n        theme_toggle=False,\n        main=[create_component()],\n        main_layout=None,\n    ).servable()\n\nDownload (right-click, save-as)"
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#gif",
    "href": "resources/streaming_number_indicators/index.html#gif",
    "title": "Streaming Number Indicators",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#mp4",
    "href": "resources/streaming_number_indicators/index.html#mp4",
    "title": "Streaming Number Indicators",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#png",
    "href": "resources/streaming_number_indicators/index.html#png",
    "title": "Streaming Number Indicators",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/streaming_number_indicators/index.html#social",
    "href": "resources/streaming_number_indicators/index.html#social",
    "title": "Streaming Number Indicators",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html",
    "title": "Table of elements with Wikipedia row content",
    "section": "",
    "text": "This app demonstrates the power of the row_content feature of Panels Tabulator pane. The app contains a table of the elements. When you click a specific row, it expands and you can study the corresponding Wikipedia article.\nThe app was developed from code and discussions in Discourse #6710."
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#introduction",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#introduction",
    "title": "Table of elements with Wikipedia row content",
    "section": "",
    "text": "This app demonstrates the power of the row_content feature of Panels Tabulator pane. The app contains a table of the elements. When you click a specific row, it expands and you can study the corresponding Wikipedia article.\nThe app was developed from code and discussions in Discourse #6710."
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#app",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#app",
    "title": "Table of elements with Wikipedia row content",
    "section": "App",
    "text": "App\nThis app runs entirely in the browser via Pyodide and panel convert.\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#code",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#code",
    "title": "Table of elements with Wikipedia row content",
    "section": "Code",
    "text": "Code\n\nhugging face/ahuang11/hurdat_tracks_viewer"
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#gif",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#gif",
    "title": "Table of elements with Wikipedia row content",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#mp4",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#mp4",
    "title": "Table of elements with Wikipedia row content",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#png",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#png",
    "title": "Table of elements with Wikipedia row content",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/table_of_elements_with_wikipedia_row_content/index.html#social",
    "href": "resources/table_of_elements_with_wikipedia_row_content/index.html#social",
    "title": "Table of elements with Wikipedia row content",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "",
    "text": "This app shows how to create a nice looking dashboard with param.Rx and Panel."
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#introduction",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#introduction",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "",
    "text": "This app shows how to create a nice looking dashboard with param.Rx and Panel."
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#app",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#app",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#code",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#code",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Code",
    "text": "Code"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#gif",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#gif",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Gif",
    "text": "Gif"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#legacy",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#legacy",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Legacy",
    "text": "Legacy\nThe legacy resources in this section shows how to create the same dashboard using the legacy hvPlot .interactive functionality. This has been superseeded by the generalized param.Rx functionality.\nGithub | Medium"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#mp4",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#mp4",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#png",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#png",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/the_easiest_way_to_create_dashboard/index.html#social",
    "href": "resources/the_easiest_way_to_create_dashboard/index.html#social",
    "title": "The Easiest Way to Create an Interactive Dashboard in Python",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  },
  {
    "objectID": "resources/weather_station_viewer/index.html",
    "href": "resources/weather_station_viewer/index.html",
    "title": "Weather Station Viewer",
    "section": "",
    "text": "This very nicely styled app by Andrew Huang allows you to compare a single year of data from a weather station to the average of a range of years.\nYou can read more about the awesome styling applied to the plots in the blog post Create publication-styled figures with hvPlot"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#introduction",
    "href": "resources/weather_station_viewer/index.html#introduction",
    "title": "Weather Station Viewer",
    "section": "",
    "text": "This very nicely styled app by Andrew Huang allows you to compare a single year of data from a weather station to the average of a range of years.\nYou can read more about the awesome styling applied to the plots in the blog post Create publication-styled figures with hvPlot"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#app",
    "href": "resources/weather_station_viewer/index.html#app",
    "title": "Weather Station Viewer",
    "section": "App",
    "text": "App\nOpen in a new window | Open in Hugging Face Spaces"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#code",
    "href": "resources/weather_station_viewer/index.html#code",
    "title": "Weather Station Viewer",
    "section": "Code",
    "text": "Code\n\nhugging face/ahuang11/year-vs-climatology"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#gif",
    "href": "resources/weather_station_viewer/index.html#gif",
    "title": "Weather Station Viewer",
    "section": "Gif",
    "text": "Gif\nWhat a nicely styled app!"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#mp4",
    "href": "resources/weather_station_viewer/index.html#mp4",
    "title": "Weather Station Viewer",
    "section": "Mp4",
    "text": "Mp4\n\n\nYour browser does not support HTML video."
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#png",
    "href": "resources/weather_station_viewer/index.html#png",
    "title": "Weather Station Viewer",
    "section": "Png",
    "text": "Png"
  },
  {
    "objectID": "resources/weather_station_viewer/index.html#social",
    "href": "resources/weather_station_viewer/index.html#social",
    "title": "Weather Station Viewer",
    "section": "Social",
    "text": "Social\nPlease share on social media. Thanks."
  }
]